// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JIGAPPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JIGAPPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_JIGAPPacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JIGAPPacket_2eproto;
namespace JIGAPPacket {
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace JIGAPPacket
PROTOBUF_NAMESPACE_OPEN
template<> ::JIGAPPacket::Packet* Arena::CreateMaybeMessage<::JIGAPPacket::Packet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JIGAPPacket {

enum Packet_PacketType : int {
  Packet_PacketType_RequestLogin = 0,
  Packet_PacketType_AnswerLogin = 1,
  Packet_PacketType_RequestRoomList = 2,
  Packet_PacketType_AnswerRoomList = 3,
  Packet_PacketType_RequestCreateRoom = 4,
  Packet_PacketType_AnswerCreateRoom = 5,
  Packet_PacketType_RequestJoinedRoom = 6,
  Packet_PacketType_AnswerJoinedRoom = 7,
  Packet_PacketType_RequestExitRoom = 8,
  Packet_PacketType_AnswerExitRoom = 9,
  Packet_PacketType_RequestChatting = 10,
  Packet_PacketType_AnswerChatting = 11
};
bool Packet_PacketType_IsValid(int value);
constexpr Packet_PacketType Packet_PacketType_PacketType_MIN = Packet_PacketType_RequestLogin;
constexpr Packet_PacketType Packet_PacketType_PacketType_MAX = Packet_PacketType_AnswerChatting;
constexpr int Packet_PacketType_PacketType_ARRAYSIZE = Packet_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Packet_PacketType_descriptor();
template<typename T>
inline const std::string& Packet_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Packet_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Packet_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Packet_PacketType_descriptor(), enum_t_value);
}
inline bool Packet_PacketType_Parse(
    const std::string& name, Packet_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Packet_PacketType>(
    Packet_PacketType_descriptor(), name, value);
}
// ===================================================================

class Packet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.Packet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Packet_PacketType PacketType;
  static constexpr PacketType RequestLogin =
    Packet_PacketType_RequestLogin;
  static constexpr PacketType AnswerLogin =
    Packet_PacketType_AnswerLogin;
  static constexpr PacketType RequestRoomList =
    Packet_PacketType_RequestRoomList;
  static constexpr PacketType AnswerRoomList =
    Packet_PacketType_AnswerRoomList;
  static constexpr PacketType RequestCreateRoom =
    Packet_PacketType_RequestCreateRoom;
  static constexpr PacketType AnswerCreateRoom =
    Packet_PacketType_AnswerCreateRoom;
  static constexpr PacketType RequestJoinedRoom =
    Packet_PacketType_RequestJoinedRoom;
  static constexpr PacketType AnswerJoinedRoom =
    Packet_PacketType_AnswerJoinedRoom;
  static constexpr PacketType RequestExitRoom =
    Packet_PacketType_RequestExitRoom;
  static constexpr PacketType AnswerExitRoom =
    Packet_PacketType_AnswerExitRoom;
  static constexpr PacketType RequestChatting =
    Packet_PacketType_RequestChatting;
  static constexpr PacketType AnswerChatting =
    Packet_PacketType_AnswerChatting;
  static inline bool PacketType_IsValid(int value) {
    return Packet_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    Packet_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    Packet_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    Packet_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return Packet_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return Packet_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(const std::string& name,
      PacketType* value) {
    return Packet_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sender = 2;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // required string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // required .JIGAPPacket.Packet.PacketType packetType = 1;
  bool has_packettype() const;
  void clear_packettype();
  static const int kPacketTypeFieldNumber = 1;
  ::JIGAPPacket::Packet_PacketType packettype() const;
  void set_packettype(::JIGAPPacket::Packet_PacketType value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.Packet)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int packettype_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// required .JIGAPPacket.Packet.PacketType packetType = 1;
inline bool Packet::has_packettype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet::clear_packettype() {
  packettype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::JIGAPPacket::Packet_PacketType Packet::packettype() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.Packet.packetType)
  return static_cast< ::JIGAPPacket::Packet_PacketType >(packettype_);
}
inline void Packet::set_packettype(::JIGAPPacket::Packet_PacketType value) {
  assert(::JIGAPPacket::Packet_PacketType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  packettype_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.Packet.packetType)
}

// required string sender = 2;
inline bool Packet::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Packet::sender() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.Packet.sender)
  return sender_.GetNoArena();
}
inline void Packet::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.Packet.sender)
}
inline void Packet::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.Packet.sender)
}
inline void Packet::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.Packet.sender)
}
inline void Packet::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.Packet.sender)
}
inline std::string* Packet::mutable_sender() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.Packet.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Packet::release_sender() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.Packet.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.Packet.sender)
}

// required string msg = 3;
inline bool Packet::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Packet::msg() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.Packet.msg)
  return msg_.GetNoArena();
}
inline void Packet::set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.Packet.msg)
}
inline void Packet::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.Packet.msg)
}
inline void Packet::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.Packet.msg)
}
inline void Packet::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.Packet.msg)
}
inline std::string* Packet::mutable_msg() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.Packet.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Packet::release_msg() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.Packet.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.Packet.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace JIGAPPacket

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JIGAPPacket::Packet_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JIGAPPacket::Packet_PacketType>() {
  return ::JIGAPPacket::Packet_PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
