// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JIGAPPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#define PROTOBUF_USE_DLLS
#define GOOGLE_DCHECK
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JIGAPPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_JIGAPPacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JIGAPPacket_2eproto;
namespace JIGAPPacket {
class BaseAsnwerPacket;
class BaseAsnwerPacketDefaultTypeInternal;
extern BaseAsnwerPacketDefaultTypeInternal _BaseAsnwerPacket_default_instance_;
class BaseRequestPacket;
class BaseRequestPacketDefaultTypeInternal;
extern BaseRequestPacketDefaultTypeInternal _BaseRequestPacket_default_instance_;
class CreateRoomAnswerPacket;
class CreateRoomAnswerPacketDefaultTypeInternal;
extern CreateRoomAnswerPacketDefaultTypeInternal _CreateRoomAnswerPacket_default_instance_;
class JoinRoomAnswerPacket;
class JoinRoomAnswerPacketDefaultTypeInternal;
extern JoinRoomAnswerPacketDefaultTypeInternal _JoinRoomAnswerPacket_default_instance_;
class LoginAnswerPacket;
class LoginAnswerPacketDefaultTypeInternal;
extern LoginAnswerPacketDefaultTypeInternal _LoginAnswerPacket_default_instance_;
class LoginRequestPacket;
class LoginRequestPacketDefaultTypeInternal;
extern LoginRequestPacketDefaultTypeInternal _LoginRequestPacket_default_instance_;
class RoomInfoPacket;
class RoomInfoPacketDefaultTypeInternal;
extern RoomInfoPacketDefaultTypeInternal _RoomInfoPacket_default_instance_;
class RoomListAnswerPacket;
class RoomListAnswerPacketDefaultTypeInternal;
extern RoomListAnswerPacketDefaultTypeInternal _RoomListAnswerPacket_default_instance_;
}  // namespace JIGAPPacket
PROTOBUF_NAMESPACE_OPEN
template<> ::JIGAPPacket::BaseAsnwerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::BaseAsnwerPacket>(Arena*);
template<> ::JIGAPPacket::BaseRequestPacket* Arena::CreateMaybeMessage<::JIGAPPacket::BaseRequestPacket>(Arena*);
template<> ::JIGAPPacket::CreateRoomAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::CreateRoomAnswerPacket>(Arena*);
template<> ::JIGAPPacket::JoinRoomAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::JoinRoomAnswerPacket>(Arena*);
template<> ::JIGAPPacket::LoginAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::LoginAnswerPacket>(Arena*);
template<> ::JIGAPPacket::LoginRequestPacket* Arena::CreateMaybeMessage<::JIGAPPacket::LoginRequestPacket>(Arena*);
template<> ::JIGAPPacket::RoomInfoPacket* Arena::CreateMaybeMessage<::JIGAPPacket::RoomInfoPacket>(Arena*);
template<> ::JIGAPPacket::RoomListAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::RoomListAnswerPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JIGAPPacket {

enum PacketType : int {
  LoginRequest = 0,
  LoginAnswer = 1,
  JoinRoomRequest = 2,
  JoinRoomAnswer = 3,
  CreateRoomRequest = 4,
  CreateRoomAsnwer = 5,
  RoomListRequest = 6,
  RoomListAnswer = 7,
  RoomListElement = 8,
  ExitRoomRequest = 9,
  ExitRoomAnswer = 10,
  ChattingRequest = 11,
  ChattingSpread = 12,
  PlayerEnterRoom = 13,
  PlayerExitRoom = 14,
  //PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  //PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketType_IsValid(int value);
constexpr PacketType PacketType_MIN = LoginRequest;
constexpr PacketType PacketType_MAX = PlayerExitRoom;
constexpr int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor();
template<typename T>
inline const std::string& PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketType_descriptor(), enum_t_value);
}
inline bool PacketType_Parse(
    const std::string& name, PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
// ===================================================================

class LoginRequestPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.LoginRequestPacket) */ {
 public:
  LoginRequestPacket();
  virtual ~LoginRequestPacket();

  LoginRequestPacket(const LoginRequestPacket& from);
  LoginRequestPacket(LoginRequestPacket&& from) noexcept
    : LoginRequestPacket() {
    *this = ::std::move(from);
  }

  inline LoginRequestPacket& operator=(const LoginRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequestPacket& operator=(LoginRequestPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequestPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestPacket* internal_default_instance() {
    return reinterpret_cast<const LoginRequestPacket*>(
               &_LoginRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LoginRequestPacket* other);
  friend void swap(LoginRequestPacket& a, LoginRequestPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestPacket* New() const final {
    return CreateMaybeMessage<LoginRequestPacket>(nullptr);
  }

  LoginRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequestPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequestPacket& from);
  void MergeFrom(const LoginRequestPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequestPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.LoginRequestPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.LoginRequestPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class LoginAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.LoginAnswerPacket) */ {
 public:
  LoginAnswerPacket();
  virtual ~LoginAnswerPacket();

  LoginAnswerPacket(const LoginAnswerPacket& from);
  LoginAnswerPacket(LoginAnswerPacket&& from) noexcept
    : LoginAnswerPacket() {
    *this = ::std::move(from);
  }

  inline LoginAnswerPacket& operator=(const LoginAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAnswerPacket& operator=(LoginAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const LoginAnswerPacket*>(
               &_LoginAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginAnswerPacket* other);
  friend void swap(LoginAnswerPacket& a, LoginAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAnswerPacket* New() const final {
    return CreateMaybeMessage<LoginAnswerPacket>(nullptr);
  }

  LoginAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginAnswerPacket& from);
  void MergeFrom(const LoginAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.LoginAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.LoginAnswerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class RoomInfoPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.RoomInfoPacket) */ {
 public:
  RoomInfoPacket();
  virtual ~RoomInfoPacket();

  RoomInfoPacket(const RoomInfoPacket& from);
  RoomInfoPacket(RoomInfoPacket&& from) noexcept
    : RoomInfoPacket() {
    *this = ::std::move(from);
  }

  inline RoomInfoPacket& operator=(const RoomInfoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfoPacket& operator=(RoomInfoPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomInfoPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomInfoPacket* internal_default_instance() {
    return reinterpret_cast<const RoomInfoPacket*>(
               &_RoomInfoPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RoomInfoPacket* other);
  friend void swap(RoomInfoPacket& a, RoomInfoPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomInfoPacket* New() const final {
    return CreateMaybeMessage<RoomInfoPacket>(nullptr);
  }

  RoomInfoPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomInfoPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomInfoPacket& from);
  void MergeFrom(const RoomInfoPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfoPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.RoomInfoPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roomname = 1;
  void clear_roomname();
  static const int kRoomnameFieldNumber = 1;
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.RoomInfoPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class JoinRoomAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.JoinRoomAnswerPacket) */ {
 public:
  JoinRoomAnswerPacket();
  virtual ~JoinRoomAnswerPacket();

  JoinRoomAnswerPacket(const JoinRoomAnswerPacket& from);
  JoinRoomAnswerPacket(JoinRoomAnswerPacket&& from) noexcept
    : JoinRoomAnswerPacket() {
    *this = ::std::move(from);
  }

  inline JoinRoomAnswerPacket& operator=(const JoinRoomAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomAnswerPacket& operator=(JoinRoomAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinRoomAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRoomAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const JoinRoomAnswerPacket*>(
               &_JoinRoomAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(JoinRoomAnswerPacket* other);
  friend void swap(JoinRoomAnswerPacket& a, JoinRoomAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinRoomAnswerPacket* New() const final {
    return CreateMaybeMessage<JoinRoomAnswerPacket>(nullptr);
  }

  JoinRoomAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRoomAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRoomAnswerPacket& from);
  void MergeFrom(const JoinRoomAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.JoinRoomAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
  bool has_roominfo() const;
  void clear_roominfo();
  static const int kRoomInfoFieldNumber = 1;
  const ::JIGAPPacket::RoomInfoPacket& roominfo() const;
  ::JIGAPPacket::RoomInfoPacket* release_roominfo();
  ::JIGAPPacket::RoomInfoPacket* mutable_roominfo();
  void set_allocated_roominfo(::JIGAPPacket::RoomInfoPacket* roominfo);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.JoinRoomAnswerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::JIGAPPacket::RoomInfoPacket* roominfo_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class CreateRoomAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.CreateRoomAnswerPacket) */ {
 public:
  CreateRoomAnswerPacket();
  virtual ~CreateRoomAnswerPacket();

  CreateRoomAnswerPacket(const CreateRoomAnswerPacket& from);
  CreateRoomAnswerPacket(CreateRoomAnswerPacket&& from) noexcept
    : CreateRoomAnswerPacket() {
    *this = ::std::move(from);
  }

  inline CreateRoomAnswerPacket& operator=(const CreateRoomAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomAnswerPacket& operator=(CreateRoomAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoomAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoomAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const CreateRoomAnswerPacket*>(
               &_CreateRoomAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CreateRoomAnswerPacket* other);
  friend void swap(CreateRoomAnswerPacket& a, CreateRoomAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRoomAnswerPacket* New() const final {
    return CreateMaybeMessage<CreateRoomAnswerPacket>(nullptr);
  }

  CreateRoomAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoomAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoomAnswerPacket& from);
  void MergeFrom(const CreateRoomAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.CreateRoomAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
  bool has_roominfo() const;
  void clear_roominfo();
  static const int kRoomInfoFieldNumber = 1;
  const ::JIGAPPacket::RoomInfoPacket& roominfo() const;
  ::JIGAPPacket::RoomInfoPacket* release_roominfo();
  ::JIGAPPacket::RoomInfoPacket* mutable_roominfo();
  void set_allocated_roominfo(::JIGAPPacket::RoomInfoPacket* roominfo);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.CreateRoomAnswerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::JIGAPPacket::RoomInfoPacket* roominfo_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class RoomListAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.RoomListAnswerPacket) */ {
 public:
  RoomListAnswerPacket();
  virtual ~RoomListAnswerPacket();

  RoomListAnswerPacket(const RoomListAnswerPacket& from);
  RoomListAnswerPacket(RoomListAnswerPacket&& from) noexcept
    : RoomListAnswerPacket() {
    *this = ::std::move(from);
  }

  inline RoomListAnswerPacket& operator=(const RoomListAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomListAnswerPacket& operator=(RoomListAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomListAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomListAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const RoomListAnswerPacket*>(
               &_RoomListAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RoomListAnswerPacket* other);
  friend void swap(RoomListAnswerPacket& a, RoomListAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomListAnswerPacket* New() const final {
    return CreateMaybeMessage<RoomListAnswerPacket>(nullptr);
  }

  RoomListAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomListAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomListAnswerPacket& from);
  void MergeFrom(const RoomListAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomListAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.RoomListAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 roomcount = 1;
  void clear_roomcount();
  static const int kRoomcountFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcount() const;
  void set_roomcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.RoomListAnswerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class BaseRequestPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.BaseRequestPacket) */ {
 public:
  BaseRequestPacket();
  virtual ~BaseRequestPacket();

  BaseRequestPacket(const BaseRequestPacket& from);
  BaseRequestPacket(BaseRequestPacket&& from) noexcept
    : BaseRequestPacket() {
    *this = ::std::move(from);
  }

  inline BaseRequestPacket& operator=(const BaseRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseRequestPacket& operator=(BaseRequestPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseRequestPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseRequestPacket* internal_default_instance() {
    return reinterpret_cast<const BaseRequestPacket*>(
               &_BaseRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BaseRequestPacket* other);
  friend void swap(BaseRequestPacket& a, BaseRequestPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseRequestPacket* New() const final {
    return CreateMaybeMessage<BaseRequestPacket>(nullptr);
  }

  BaseRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseRequestPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseRequestPacket& from);
  void MergeFrom(const BaseRequestPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseRequestPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.BaseRequestPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .JIGAPPacket.PacketType packettype = 1;
  void clear_packettype();
  static const int kPackettypeFieldNumber = 1;
  ::JIGAPPacket::PacketType packettype() const;
  void set_packettype(::JIGAPPacket::PacketType value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.BaseRequestPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int packettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class BaseAsnwerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.BaseAsnwerPacket) */ {
 public:
  BaseAsnwerPacket();
  virtual ~BaseAsnwerPacket();

  BaseAsnwerPacket(const BaseAsnwerPacket& from);
  BaseAsnwerPacket(BaseAsnwerPacket&& from) noexcept
    : BaseAsnwerPacket() {
    *this = ::std::move(from);
  }

  inline BaseAsnwerPacket& operator=(const BaseAsnwerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseAsnwerPacket& operator=(BaseAsnwerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseAsnwerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseAsnwerPacket* internal_default_instance() {
    return reinterpret_cast<const BaseAsnwerPacket*>(
               &_BaseAsnwerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BaseAsnwerPacket* other);
  friend void swap(BaseAsnwerPacket& a, BaseAsnwerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseAsnwerPacket* New() const final {
    return CreateMaybeMessage<BaseAsnwerPacket>(nullptr);
  }

  BaseAsnwerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseAsnwerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseAsnwerPacket& from);
  void MergeFrom(const BaseAsnwerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseAsnwerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.BaseAsnwerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .JIGAPPacket.PacketType packettype = 1;
  void clear_packettype();
  static const int kPackettypeFieldNumber = 1;
  ::JIGAPPacket::PacketType packettype() const;
  void set_packettype(::JIGAPPacket::PacketType value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.BaseAsnwerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int packettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequestPacket

// string id = 1;
inline void LoginRequestPacket::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequestPacket::id() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.LoginRequestPacket.id)
  return id_.GetNoArena();
}
inline void LoginRequestPacket::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.LoginRequestPacket.id)
}
inline void LoginRequestPacket::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.LoginRequestPacket.id)
}
inline void LoginRequestPacket::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.LoginRequestPacket.id)
}
inline void LoginRequestPacket::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.LoginRequestPacket.id)
}
inline std::string* LoginRequestPacket::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.LoginRequestPacket.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequestPacket::release_id() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.LoginRequestPacket.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequestPacket::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.LoginRequestPacket.id)
}

// -------------------------------------------------------------------

// LoginAnswerPacket

// bool success = 1;
inline void LoginAnswerPacket::clear_success() {
  success_ = false;
}
inline bool LoginAnswerPacket::success() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.LoginAnswerPacket.success)
  return success_;
}
inline void LoginAnswerPacket::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.LoginAnswerPacket.success)
}

// -------------------------------------------------------------------

// RoomInfoPacket

// string roomname = 1;
inline void RoomInfoPacket::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoomInfoPacket::roomname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.RoomInfoPacket.roomname)
  return roomname_.GetNoArena();
}
inline void RoomInfoPacket::set_roomname(const std::string& value) {
  
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.RoomInfoPacket.roomname)
}
inline void RoomInfoPacket::set_roomname(std::string&& value) {
  
  roomname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.RoomInfoPacket.roomname)
}
inline void RoomInfoPacket::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.RoomInfoPacket.roomname)
}
inline void RoomInfoPacket::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.RoomInfoPacket.roomname)
}
inline std::string* RoomInfoPacket::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.RoomInfoPacket.roomname)
  return roomname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomInfoPacket::release_roomname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.RoomInfoPacket.roomname)
  
  return roomname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomInfoPacket::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.RoomInfoPacket.roomname)
}

// -------------------------------------------------------------------

// JoinRoomAnswerPacket

// .JIGAPPacket.RoomInfoPacket roomInfo = 1;
inline bool JoinRoomAnswerPacket::has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline void JoinRoomAnswerPacket::clear_roominfo() {
  if (GetArenaNoVirtual() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
inline const ::JIGAPPacket::RoomInfoPacket& JoinRoomAnswerPacket::roominfo() const {
  const ::JIGAPPacket::RoomInfoPacket* p = roominfo_;
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinRoomAnswerPacket.roomInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::JIGAPPacket::RoomInfoPacket*>(
      &::JIGAPPacket::_RoomInfoPacket_default_instance_);
}
inline ::JIGAPPacket::RoomInfoPacket* JoinRoomAnswerPacket::release_roominfo() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.JoinRoomAnswerPacket.roomInfo)
  
  ::JIGAPPacket::RoomInfoPacket* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::JIGAPPacket::RoomInfoPacket* JoinRoomAnswerPacket::mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JIGAPPacket::RoomInfoPacket>(GetArenaNoVirtual());
    roominfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.JoinRoomAnswerPacket.roomInfo)
  return roominfo_;
}
inline void JoinRoomAnswerPacket::set_allocated_roominfo(::JIGAPPacket::RoomInfoPacket* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roominfo_;
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.JoinRoomAnswerPacket.roomInfo)
}

// bool success = 2;
inline void JoinRoomAnswerPacket::clear_success() {
  success_ = false;
}
inline bool JoinRoomAnswerPacket::success() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinRoomAnswerPacket.success)
  return success_;
}
inline void JoinRoomAnswerPacket::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.JoinRoomAnswerPacket.success)
}

// -------------------------------------------------------------------

// CreateRoomAnswerPacket

// .JIGAPPacket.RoomInfoPacket roomInfo = 1;
inline bool CreateRoomAnswerPacket::has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline void CreateRoomAnswerPacket::clear_roominfo() {
  if (GetArenaNoVirtual() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
inline const ::JIGAPPacket::RoomInfoPacket& CreateRoomAnswerPacket::roominfo() const {
  const ::JIGAPPacket::RoomInfoPacket* p = roominfo_;
  // @@protoc_insertion_point(field_get:JIGAPPacket.CreateRoomAnswerPacket.roomInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::JIGAPPacket::RoomInfoPacket*>(
      &::JIGAPPacket::_RoomInfoPacket_default_instance_);
}
inline ::JIGAPPacket::RoomInfoPacket* CreateRoomAnswerPacket::release_roominfo() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.CreateRoomAnswerPacket.roomInfo)
  
  ::JIGAPPacket::RoomInfoPacket* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::JIGAPPacket::RoomInfoPacket* CreateRoomAnswerPacket::mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JIGAPPacket::RoomInfoPacket>(GetArenaNoVirtual());
    roominfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.CreateRoomAnswerPacket.roomInfo)
  return roominfo_;
}
inline void CreateRoomAnswerPacket::set_allocated_roominfo(::JIGAPPacket::RoomInfoPacket* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roominfo_;
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.CreateRoomAnswerPacket.roomInfo)
}

// bool success = 2;
inline void CreateRoomAnswerPacket::clear_success() {
  success_ = false;
}
inline bool CreateRoomAnswerPacket::success() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.CreateRoomAnswerPacket.success)
  return success_;
}
inline void CreateRoomAnswerPacket::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.CreateRoomAnswerPacket.success)
}

// -------------------------------------------------------------------

// RoomListAnswerPacket

// int32 roomcount = 1;
inline void RoomListAnswerPacket::clear_roomcount() {
  roomcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomListAnswerPacket::roomcount() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.RoomListAnswerPacket.roomcount)
  return roomcount_;
}
inline void RoomListAnswerPacket::set_roomcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomcount_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.RoomListAnswerPacket.roomcount)
}

// -------------------------------------------------------------------

// BaseRequestPacket

// .JIGAPPacket.PacketType packettype = 1;
inline void BaseRequestPacket::clear_packettype() {
  packettype_ = 0;
}
inline ::JIGAPPacket::PacketType BaseRequestPacket::packettype() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.BaseRequestPacket.packettype)
  return static_cast< ::JIGAPPacket::PacketType >(packettype_);
}
inline void BaseRequestPacket::set_packettype(::JIGAPPacket::PacketType value) {
  
  packettype_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.BaseRequestPacket.packettype)
}

// -------------------------------------------------------------------

// BaseAsnwerPacket

// .JIGAPPacket.PacketType packettype = 1;
inline void BaseAsnwerPacket::clear_packettype() {
  packettype_ = 0;
}
inline ::JIGAPPacket::PacketType BaseAsnwerPacket::packettype() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.BaseAsnwerPacket.packettype)
  return static_cast< ::JIGAPPacket::PacketType >(packettype_);
}
inline void BaseAsnwerPacket::set_packettype(::JIGAPPacket::PacketType value) {
  
  packettype_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.BaseAsnwerPacket.packettype)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace JIGAPPacket

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JIGAPPacket::PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JIGAPPacket::PacketType>() {
  return ::JIGAPPacket::PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
