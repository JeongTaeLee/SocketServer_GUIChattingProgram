// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JIGAPPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JIGAPPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_JIGAPPacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JIGAPPacket_2eproto;
namespace JIGAPPacket {
class BaseAnswerPacket;
class BaseAnswerPacketDefaultTypeInternal;
extern BaseAnswerPacketDefaultTypeInternal _BaseAnswerPacket_default_instance_;
class BaseRequestPacket;
class BaseRequestPacketDefaultTypeInternal;
extern BaseRequestPacketDefaultTypeInternal _BaseRequestPacket_default_instance_;
class ChattingPacket;
class ChattingPacketDefaultTypeInternal;
extern ChattingPacketDefaultTypeInternal _ChattingPacket_default_instance_;
class CreateRoomPacket;
class CreateRoomPacketDefaultTypeInternal;
extern CreateRoomPacketDefaultTypeInternal _CreateRoomPacket_default_instance_;
class JoinedRoomAnswerPacket;
class JoinedRoomAnswerPacketDefaultTypeInternal;
extern JoinedRoomAnswerPacketDefaultTypeInternal _JoinedRoomAnswerPacket_default_instance_;
class JoinedRoomRequestPacket;
class JoinedRoomRequestPacketDefaultTypeInternal;
extern JoinedRoomRequestPacketDefaultTypeInternal _JoinedRoomRequestPacket_default_instance_;
class LoginAnswerPacket;
class LoginAnswerPacketDefaultTypeInternal;
extern LoginAnswerPacketDefaultTypeInternal _LoginAnswerPacket_default_instance_;
class LoginRequestPacket;
class LoginRequestPacketDefaultTypeInternal;
extern LoginRequestPacketDefaultTypeInternal _LoginRequestPacket_default_instance_;
class RoomElementPacket;
class RoomElementPacketDefaultTypeInternal;
extern RoomElementPacketDefaultTypeInternal _RoomElementPacket_default_instance_;
class RoomListAnswerPacket;
class RoomListAnswerPacketDefaultTypeInternal;
extern RoomListAnswerPacketDefaultTypeInternal _RoomListAnswerPacket_default_instance_;
}  // namespace JIGAPPacket
PROTOBUF_NAMESPACE_OPEN
template<> ::JIGAPPacket::BaseAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::BaseAnswerPacket>(Arena*);
template<> ::JIGAPPacket::BaseRequestPacket* Arena::CreateMaybeMessage<::JIGAPPacket::BaseRequestPacket>(Arena*);
template<> ::JIGAPPacket::ChattingPacket* Arena::CreateMaybeMessage<::JIGAPPacket::ChattingPacket>(Arena*);
template<> ::JIGAPPacket::CreateRoomPacket* Arena::CreateMaybeMessage<::JIGAPPacket::CreateRoomPacket>(Arena*);
template<> ::JIGAPPacket::JoinedRoomAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::JoinedRoomAnswerPacket>(Arena*);
template<> ::JIGAPPacket::JoinedRoomRequestPacket* Arena::CreateMaybeMessage<::JIGAPPacket::JoinedRoomRequestPacket>(Arena*);
template<> ::JIGAPPacket::LoginAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::LoginAnswerPacket>(Arena*);
template<> ::JIGAPPacket::LoginRequestPacket* Arena::CreateMaybeMessage<::JIGAPPacket::LoginRequestPacket>(Arena*);
template<> ::JIGAPPacket::RoomElementPacket* Arena::CreateMaybeMessage<::JIGAPPacket::RoomElementPacket>(Arena*);
template<> ::JIGAPPacket::RoomListAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::RoomListAnswerPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JIGAPPacket {

enum PacketType : int {
  LoginRequestType = 0,
  LoginAnswerType = 1,
  JoinedRoomRequestType = 2,
  JoinedRoomAnswerType = 3,
  CreateRoomType = 4,
  RoomListRequestType = 5,
  RoomListAnswerType = 6,
  RoomElementType = 7,
  ExitRoomRequestType = 8,
  ExitRoomAnswerType = 9,
  ChattingType = 10
};
bool PacketType_IsValid(int value);
constexpr PacketType PacketType_MIN = LoginRequestType;
constexpr PacketType PacketType_MAX = ChattingType;
constexpr int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor();
template<typename T>
inline const std::string& PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketType_descriptor(), enum_t_value);
}
inline bool PacketType_Parse(
    const std::string& name, PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
// ===================================================================

class BaseRequestPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.BaseRequestPacket) */ {
 public:
  BaseRequestPacket();
  virtual ~BaseRequestPacket();

  BaseRequestPacket(const BaseRequestPacket& from);
  BaseRequestPacket(BaseRequestPacket&& from) noexcept
    : BaseRequestPacket() {
    *this = ::std::move(from);
  }

  inline BaseRequestPacket& operator=(const BaseRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseRequestPacket& operator=(BaseRequestPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseRequestPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseRequestPacket* internal_default_instance() {
    return reinterpret_cast<const BaseRequestPacket*>(
               &_BaseRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BaseRequestPacket* other);
  friend void swap(BaseRequestPacket& a, BaseRequestPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseRequestPacket* New() const final {
    return CreateMaybeMessage<BaseRequestPacket>(nullptr);
  }

  BaseRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseRequestPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseRequestPacket& from);
  void MergeFrom(const BaseRequestPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseRequestPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.BaseRequestPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .JIGAPPacket.PacketType requestType = 1;
  bool has_requesttype() const;
  void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  ::JIGAPPacket::PacketType requesttype() const;
  void set_requesttype(::JIGAPPacket::PacketType value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.BaseRequestPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int requesttype_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class BaseAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.BaseAnswerPacket) */ {
 public:
  BaseAnswerPacket();
  virtual ~BaseAnswerPacket();

  BaseAnswerPacket(const BaseAnswerPacket& from);
  BaseAnswerPacket(BaseAnswerPacket&& from) noexcept
    : BaseAnswerPacket() {
    *this = ::std::move(from);
  }

  inline BaseAnswerPacket& operator=(const BaseAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseAnswerPacket& operator=(BaseAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const BaseAnswerPacket*>(
               &_BaseAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BaseAnswerPacket* other);
  friend void swap(BaseAnswerPacket& a, BaseAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseAnswerPacket* New() const final {
    return CreateMaybeMessage<BaseAnswerPacket>(nullptr);
  }

  BaseAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseAnswerPacket& from);
  void MergeFrom(const BaseAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.BaseAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .JIGAPPacket.PacketType answerType = 2;
  bool has_answertype() const;
  void clear_answertype();
  static const int kAnswerTypeFieldNumber = 2;
  ::JIGAPPacket::PacketType answertype() const;
  void set_answertype(::JIGAPPacket::PacketType value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.BaseAnswerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int answertype_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class LoginRequestPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.LoginRequestPacket) */ {
 public:
  LoginRequestPacket();
  virtual ~LoginRequestPacket();

  LoginRequestPacket(const LoginRequestPacket& from);
  LoginRequestPacket(LoginRequestPacket&& from) noexcept
    : LoginRequestPacket() {
    *this = ::std::move(from);
  }

  inline LoginRequestPacket& operator=(const LoginRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequestPacket& operator=(LoginRequestPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequestPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequestPacket* internal_default_instance() {
    return reinterpret_cast<const LoginRequestPacket*>(
               &_LoginRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginRequestPacket* other);
  friend void swap(LoginRequestPacket& a, LoginRequestPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequestPacket* New() const final {
    return CreateMaybeMessage<LoginRequestPacket>(nullptr);
  }

  LoginRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequestPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequestPacket& from);
  void MergeFrom(const LoginRequestPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequestPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.LoginRequestPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nickName = 1;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 1;
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.LoginRequestPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class LoginAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.LoginAnswerPacket) */ {
 public:
  LoginAnswerPacket();
  virtual ~LoginAnswerPacket();

  LoginAnswerPacket(const LoginAnswerPacket& from);
  LoginAnswerPacket(LoginAnswerPacket&& from) noexcept
    : LoginAnswerPacket() {
    *this = ::std::move(from);
  }

  inline LoginAnswerPacket& operator=(const LoginAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAnswerPacket& operator=(LoginAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const LoginAnswerPacket*>(
               &_LoginAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LoginAnswerPacket* other);
  friend void swap(LoginAnswerPacket& a, LoginAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAnswerPacket* New() const final {
    return CreateMaybeMessage<LoginAnswerPacket>(nullptr);
  }

  LoginAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginAnswerPacket& from);
  void MergeFrom(const LoginAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.LoginAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool loginSuccess = 1;
  bool has_loginsuccess() const;
  void clear_loginsuccess();
  static const int kLoginSuccessFieldNumber = 1;
  bool loginsuccess() const;
  void set_loginsuccess(bool value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.LoginAnswerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool loginsuccess_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class CreateRoomPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.CreateRoomPacket) */ {
 public:
  CreateRoomPacket();
  virtual ~CreateRoomPacket();

  CreateRoomPacket(const CreateRoomPacket& from);
  CreateRoomPacket(CreateRoomPacket&& from) noexcept
    : CreateRoomPacket() {
    *this = ::std::move(from);
  }

  inline CreateRoomPacket& operator=(const CreateRoomPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomPacket& operator=(CreateRoomPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoomPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoomPacket* internal_default_instance() {
    return reinterpret_cast<const CreateRoomPacket*>(
               &_CreateRoomPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CreateRoomPacket* other);
  friend void swap(CreateRoomPacket& a, CreateRoomPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRoomPacket* New() const final {
    return CreateMaybeMessage<CreateRoomPacket>(nullptr);
  }

  CreateRoomPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoomPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoomPacket& from);
  void MergeFrom(const CreateRoomPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.CreateRoomPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string roomName = 1;
  bool has_roomname() const;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 1;
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.CreateRoomPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class JoinedRoomRequestPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.JoinedRoomRequestPacket) */ {
 public:
  JoinedRoomRequestPacket();
  virtual ~JoinedRoomRequestPacket();

  JoinedRoomRequestPacket(const JoinedRoomRequestPacket& from);
  JoinedRoomRequestPacket(JoinedRoomRequestPacket&& from) noexcept
    : JoinedRoomRequestPacket() {
    *this = ::std::move(from);
  }

  inline JoinedRoomRequestPacket& operator=(const JoinedRoomRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinedRoomRequestPacket& operator=(JoinedRoomRequestPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinedRoomRequestPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinedRoomRequestPacket* internal_default_instance() {
    return reinterpret_cast<const JoinedRoomRequestPacket*>(
               &_JoinedRoomRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(JoinedRoomRequestPacket* other);
  friend void swap(JoinedRoomRequestPacket& a, JoinedRoomRequestPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinedRoomRequestPacket* New() const final {
    return CreateMaybeMessage<JoinedRoomRequestPacket>(nullptr);
  }

  JoinedRoomRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinedRoomRequestPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinedRoomRequestPacket& from);
  void MergeFrom(const JoinedRoomRequestPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinedRoomRequestPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.JoinedRoomRequestPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string roomName = 1;
  bool has_roomname() const;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 1;
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.JoinedRoomRequestPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class JoinedRoomAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.JoinedRoomAnswerPacket) */ {
 public:
  JoinedRoomAnswerPacket();
  virtual ~JoinedRoomAnswerPacket();

  JoinedRoomAnswerPacket(const JoinedRoomAnswerPacket& from);
  JoinedRoomAnswerPacket(JoinedRoomAnswerPacket&& from) noexcept
    : JoinedRoomAnswerPacket() {
    *this = ::std::move(from);
  }

  inline JoinedRoomAnswerPacket& operator=(const JoinedRoomAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinedRoomAnswerPacket& operator=(JoinedRoomAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinedRoomAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinedRoomAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const JoinedRoomAnswerPacket*>(
               &_JoinedRoomAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(JoinedRoomAnswerPacket* other);
  friend void swap(JoinedRoomAnswerPacket& a, JoinedRoomAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinedRoomAnswerPacket* New() const final {
    return CreateMaybeMessage<JoinedRoomAnswerPacket>(nullptr);
  }

  JoinedRoomAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinedRoomAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinedRoomAnswerPacket& from);
  void MergeFrom(const JoinedRoomAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinedRoomAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.JoinedRoomAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string roomName = 2;
  bool has_roomname() const;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 2;
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);

  // required bool joinedRoomSuccess = 1;
  bool has_joinedroomsuccess() const;
  void clear_joinedroomsuccess();
  static const int kJoinedRoomSuccessFieldNumber = 1;
  bool joinedroomsuccess() const;
  void set_joinedroomsuccess(bool value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.JoinedRoomAnswerPacket)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  bool joinedroomsuccess_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class ChattingPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.ChattingPacket) */ {
 public:
  ChattingPacket();
  virtual ~ChattingPacket();

  ChattingPacket(const ChattingPacket& from);
  ChattingPacket(ChattingPacket&& from) noexcept
    : ChattingPacket() {
    *this = ::std::move(from);
  }

  inline ChattingPacket& operator=(const ChattingPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChattingPacket& operator=(ChattingPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChattingPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChattingPacket* internal_default_instance() {
    return reinterpret_cast<const ChattingPacket*>(
               &_ChattingPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ChattingPacket* other);
  friend void swap(ChattingPacket& a, ChattingPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChattingPacket* New() const final {
    return CreateMaybeMessage<ChattingPacket>(nullptr);
  }

  ChattingPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChattingPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChattingPacket& from);
  void MergeFrom(const ChattingPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChattingPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.ChattingPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.ChattingPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class RoomListAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.RoomListAnswerPacket) */ {
 public:
  RoomListAnswerPacket();
  virtual ~RoomListAnswerPacket();

  RoomListAnswerPacket(const RoomListAnswerPacket& from);
  RoomListAnswerPacket(RoomListAnswerPacket&& from) noexcept
    : RoomListAnswerPacket() {
    *this = ::std::move(from);
  }

  inline RoomListAnswerPacket& operator=(const RoomListAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomListAnswerPacket& operator=(RoomListAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomListAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomListAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const RoomListAnswerPacket*>(
               &_RoomListAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RoomListAnswerPacket* other);
  friend void swap(RoomListAnswerPacket& a, RoomListAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomListAnswerPacket* New() const final {
    return CreateMaybeMessage<RoomListAnswerPacket>(nullptr);
  }

  RoomListAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomListAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomListAnswerPacket& from);
  void MergeFrom(const RoomListAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomListAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.RoomListAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomCount = 1;
  bool has_roomcount() const;
  void clear_roomcount();
  static const int kRoomCountFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcount() const;
  void set_roomcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.RoomListAnswerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcount_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class RoomElementPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.RoomElementPacket) */ {
 public:
  RoomElementPacket();
  virtual ~RoomElementPacket();

  RoomElementPacket(const RoomElementPacket& from);
  RoomElementPacket(RoomElementPacket&& from) noexcept
    : RoomElementPacket() {
    *this = ::std::move(from);
  }

  inline RoomElementPacket& operator=(const RoomElementPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomElementPacket& operator=(RoomElementPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomElementPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomElementPacket* internal_default_instance() {
    return reinterpret_cast<const RoomElementPacket*>(
               &_RoomElementPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RoomElementPacket* other);
  friend void swap(RoomElementPacket& a, RoomElementPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomElementPacket* New() const final {
    return CreateMaybeMessage<RoomElementPacket>(nullptr);
  }

  RoomElementPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomElementPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomElementPacket& from);
  void MergeFrom(const RoomElementPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomElementPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.RoomElementPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string roomName = 1;
  bool has_roomname() const;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 1;
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.RoomElementPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseRequestPacket

// required .JIGAPPacket.PacketType requestType = 1;
inline bool BaseRequestPacket::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseRequestPacket::clear_requesttype() {
  requesttype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::JIGAPPacket::PacketType BaseRequestPacket::requesttype() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.BaseRequestPacket.requestType)
  return static_cast< ::JIGAPPacket::PacketType >(requesttype_);
}
inline void BaseRequestPacket::set_requesttype(::JIGAPPacket::PacketType value) {
  assert(::JIGAPPacket::PacketType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.BaseRequestPacket.requestType)
}

// -------------------------------------------------------------------

// BaseAnswerPacket

// required .JIGAPPacket.PacketType answerType = 2;
inline bool BaseAnswerPacket::has_answertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseAnswerPacket::clear_answertype() {
  answertype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::JIGAPPacket::PacketType BaseAnswerPacket::answertype() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.BaseAnswerPacket.answerType)
  return static_cast< ::JIGAPPacket::PacketType >(answertype_);
}
inline void BaseAnswerPacket::set_answertype(::JIGAPPacket::PacketType value) {
  assert(::JIGAPPacket::PacketType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  answertype_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.BaseAnswerPacket.answerType)
}

// -------------------------------------------------------------------

// LoginRequestPacket

// required string nickName = 1;
inline bool LoginRequestPacket::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequestPacket::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginRequestPacket::nickname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.LoginRequestPacket.nickName)
  return nickname_.GetNoArena();
}
inline void LoginRequestPacket::set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.LoginRequestPacket.nickName)
}
inline void LoginRequestPacket::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.LoginRequestPacket.nickName)
}
inline void LoginRequestPacket::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.LoginRequestPacket.nickName)
}
inline void LoginRequestPacket::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.LoginRequestPacket.nickName)
}
inline std::string* LoginRequestPacket::mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.LoginRequestPacket.nickName)
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequestPacket::release_nickname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.LoginRequestPacket.nickName)
  if (!has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nickname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequestPacket::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.LoginRequestPacket.nickName)
}

// -------------------------------------------------------------------

// LoginAnswerPacket

// required bool loginSuccess = 1;
inline bool LoginAnswerPacket::has_loginsuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginAnswerPacket::clear_loginsuccess() {
  loginsuccess_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool LoginAnswerPacket::loginsuccess() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.LoginAnswerPacket.loginSuccess)
  return loginsuccess_;
}
inline void LoginAnswerPacket::set_loginsuccess(bool value) {
  _has_bits_[0] |= 0x00000001u;
  loginsuccess_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.LoginAnswerPacket.loginSuccess)
}

// -------------------------------------------------------------------

// CreateRoomPacket

// required string roomName = 1;
inline bool CreateRoomPacket::has_roomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoomPacket::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateRoomPacket::roomname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.CreateRoomPacket.roomName)
  return roomname_.GetNoArena();
}
inline void CreateRoomPacket::set_roomname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.CreateRoomPacket.roomName)
}
inline void CreateRoomPacket::set_roomname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.CreateRoomPacket.roomName)
}
inline void CreateRoomPacket::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.CreateRoomPacket.roomName)
}
inline void CreateRoomPacket::set_roomname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.CreateRoomPacket.roomName)
}
inline std::string* CreateRoomPacket::mutable_roomname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.CreateRoomPacket.roomName)
  return roomname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRoomPacket::release_roomname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.CreateRoomPacket.roomName)
  if (!has_roomname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return roomname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRoomPacket::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  roomname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.CreateRoomPacket.roomName)
}

// -------------------------------------------------------------------

// JoinedRoomRequestPacket

// required string roomName = 1;
inline bool JoinedRoomRequestPacket::has_roomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinedRoomRequestPacket::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinedRoomRequestPacket::roomname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinedRoomRequestPacket.roomName)
  return roomname_.GetNoArena();
}
inline void JoinedRoomRequestPacket::set_roomname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.JoinedRoomRequestPacket.roomName)
}
inline void JoinedRoomRequestPacket::set_roomname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.JoinedRoomRequestPacket.roomName)
}
inline void JoinedRoomRequestPacket::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.JoinedRoomRequestPacket.roomName)
}
inline void JoinedRoomRequestPacket::set_roomname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.JoinedRoomRequestPacket.roomName)
}
inline std::string* JoinedRoomRequestPacket::mutable_roomname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.JoinedRoomRequestPacket.roomName)
  return roomname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinedRoomRequestPacket::release_roomname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.JoinedRoomRequestPacket.roomName)
  if (!has_roomname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return roomname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinedRoomRequestPacket::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  roomname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.JoinedRoomRequestPacket.roomName)
}

// -------------------------------------------------------------------

// JoinedRoomAnswerPacket

// required bool joinedRoomSuccess = 1;
inline bool JoinedRoomAnswerPacket::has_joinedroomsuccess() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinedRoomAnswerPacket::clear_joinedroomsuccess() {
  joinedroomsuccess_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool JoinedRoomAnswerPacket::joinedroomsuccess() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinedRoomAnswerPacket.joinedRoomSuccess)
  return joinedroomsuccess_;
}
inline void JoinedRoomAnswerPacket::set_joinedroomsuccess(bool value) {
  _has_bits_[0] |= 0x00000002u;
  joinedroomsuccess_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.JoinedRoomAnswerPacket.joinedRoomSuccess)
}

// required string roomName = 2;
inline bool JoinedRoomAnswerPacket::has_roomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinedRoomAnswerPacket::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinedRoomAnswerPacket::roomname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
  return roomname_.GetNoArena();
}
inline void JoinedRoomAnswerPacket::set_roomname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
}
inline void JoinedRoomAnswerPacket::set_roomname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
}
inline void JoinedRoomAnswerPacket::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
}
inline void JoinedRoomAnswerPacket::set_roomname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
}
inline std::string* JoinedRoomAnswerPacket::mutable_roomname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
  return roomname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinedRoomAnswerPacket::release_roomname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
  if (!has_roomname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return roomname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinedRoomAnswerPacket::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  roomname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
}

// -------------------------------------------------------------------

// ChattingPacket

// required string msg = 1;
inline bool ChattingPacket::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChattingPacket::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChattingPacket::msg() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.ChattingPacket.msg)
  return msg_.GetNoArena();
}
inline void ChattingPacket::set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.ChattingPacket.msg)
}
inline void ChattingPacket::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.ChattingPacket.msg)
}
inline void ChattingPacket::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.ChattingPacket.msg)
}
inline void ChattingPacket::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.ChattingPacket.msg)
}
inline std::string* ChattingPacket::mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.ChattingPacket.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChattingPacket::release_msg() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.ChattingPacket.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChattingPacket::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.ChattingPacket.msg)
}

// -------------------------------------------------------------------

// RoomListAnswerPacket

// required int32 roomCount = 1;
inline bool RoomListAnswerPacket::has_roomcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomListAnswerPacket::clear_roomcount() {
  roomcount_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomListAnswerPacket::roomcount() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.RoomListAnswerPacket.roomCount)
  return roomcount_;
}
inline void RoomListAnswerPacket::set_roomcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  roomcount_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.RoomListAnswerPacket.roomCount)
}

// -------------------------------------------------------------------

// RoomElementPacket

// required string roomName = 1;
inline bool RoomElementPacket::has_roomname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomElementPacket::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoomElementPacket::roomname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.RoomElementPacket.roomName)
  return roomname_.GetNoArena();
}
inline void RoomElementPacket::set_roomname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.RoomElementPacket.roomName)
}
inline void RoomElementPacket::set_roomname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.RoomElementPacket.roomName)
}
inline void RoomElementPacket::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.RoomElementPacket.roomName)
}
inline void RoomElementPacket::set_roomname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.RoomElementPacket.roomName)
}
inline std::string* RoomElementPacket::mutable_roomname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.RoomElementPacket.roomName)
  return roomname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomElementPacket::release_roomname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.RoomElementPacket.roomName)
  if (!has_roomname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return roomname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomElementPacket::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  roomname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.RoomElementPacket.roomName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace JIGAPPacket

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JIGAPPacket::PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JIGAPPacket::PacketType>() {
  return ::JIGAPPacket::PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
