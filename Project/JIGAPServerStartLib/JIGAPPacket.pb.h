// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JIGAPPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#define PROTOBUF_USE_DLLS

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JIGAPPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_JIGAPPacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JIGAPPacket_2eproto;
namespace JIGAPPacket {
class JoinedRoomAnswerPacket;
class JoinedRoomAnswerPacketDefaultTypeInternal;
extern JoinedRoomAnswerPacketDefaultTypeInternal _JoinedRoomAnswerPacket_default_instance_;
class LoginAnswerPacket;
class LoginAnswerPacketDefaultTypeInternal;
extern LoginAnswerPacketDefaultTypeInternal _LoginAnswerPacket_default_instance_;
class RoomListAnswerPacket;
class RoomListAnswerPacketDefaultTypeInternal;
extern RoomListAnswerPacketDefaultTypeInternal _RoomListAnswerPacket_default_instance_;
class StringPacket;
class StringPacketDefaultTypeInternal;
extern StringPacketDefaultTypeInternal _StringPacket_default_instance_;
class TypePacket;
class TypePacketDefaultTypeInternal;
extern TypePacketDefaultTypeInternal _TypePacket_default_instance_;
}  // namespace JIGAPPacket
PROTOBUF_NAMESPACE_OPEN
template<> ::JIGAPPacket::JoinedRoomAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::JoinedRoomAnswerPacket>(Arena*);
template<> ::JIGAPPacket::LoginAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::LoginAnswerPacket>(Arena*);
template<> ::JIGAPPacket::RoomListAnswerPacket* Arena::CreateMaybeMessage<::JIGAPPacket::RoomListAnswerPacket>(Arena*);
template<> ::JIGAPPacket::StringPacket* Arena::CreateMaybeMessage<::JIGAPPacket::StringPacket>(Arena*);
template<> ::JIGAPPacket::TypePacket* Arena::CreateMaybeMessage<::JIGAPPacket::TypePacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JIGAPPacket {

enum PacketType : int {
  LoginRequestType = 0,
  LoginAnswerType = 1,
  JoinedRoomRequestType = 2,
  JoinedRoomAnswerType = 3,
  CreateRoomType = 4,
  RoomListRequestType = 5,
  RoomListAnswerType = 6,
  ElementOfRoomListType = 7,
  ExitRoomRequestType = 8,
  ExitRoomAnswerType = 9,
  ChattingType = 10,
  //PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  //PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketType_IsValid(int value);
constexpr PacketType PacketType_MIN = LoginRequestType;
constexpr PacketType PacketType_MAX = ChattingType;
constexpr int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor();
template<typename T>
inline const std::string& PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketType_descriptor(), enum_t_value);
}
inline bool PacketType_Parse(
    const std::string& name, PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
// ===================================================================

class TypePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.TypePacket) */ {
 public:
  TypePacket();
  virtual ~TypePacket();

  TypePacket(const TypePacket& from);
  TypePacket(TypePacket&& from) noexcept
    : TypePacket() {
    *this = ::std::move(from);
  }

  inline TypePacket& operator=(const TypePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypePacket& operator=(TypePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypePacket* internal_default_instance() {
    return reinterpret_cast<const TypePacket*>(
               &_TypePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TypePacket* other);
  friend void swap(TypePacket& a, TypePacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypePacket* New() const final {
    return CreateMaybeMessage<TypePacket>(nullptr);
  }

  TypePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypePacket& from);
  void MergeFrom(const TypePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.TypePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .JIGAPPacket.PacketType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::JIGAPPacket::PacketType type() const;
  void set_type(::JIGAPPacket::PacketType value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.TypePacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class StringPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.StringPacket) */ {
 public:
  StringPacket();
  virtual ~StringPacket();

  StringPacket(const StringPacket& from);
  StringPacket(StringPacket&& from) noexcept
    : StringPacket() {
    *this = ::std::move(from);
  }

  inline StringPacket& operator=(const StringPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringPacket& operator=(StringPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringPacket* internal_default_instance() {
    return reinterpret_cast<const StringPacket*>(
               &_StringPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StringPacket* other);
  friend void swap(StringPacket& a, StringPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringPacket* New() const final {
    return CreateMaybeMessage<StringPacket>(nullptr);
  }

  StringPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringPacket& from);
  void MergeFrom(const StringPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.StringPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string str = 1;
  void clear_str();
  static const int kStrFieldNumber = 1;
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.StringPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class LoginAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.LoginAnswerPacket) */ {
 public:
  LoginAnswerPacket();
  virtual ~LoginAnswerPacket();

  LoginAnswerPacket(const LoginAnswerPacket& from);
  LoginAnswerPacket(LoginAnswerPacket&& from) noexcept
    : LoginAnswerPacket() {
    *this = ::std::move(from);
  }

  inline LoginAnswerPacket& operator=(const LoginAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAnswerPacket& operator=(LoginAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const LoginAnswerPacket*>(
               &_LoginAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginAnswerPacket* other);
  friend void swap(LoginAnswerPacket& a, LoginAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAnswerPacket* New() const final {
    return CreateMaybeMessage<LoginAnswerPacket>(nullptr);
  }

  LoginAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginAnswerPacket& from);
  void MergeFrom(const LoginAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.LoginAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool loginSuccess = 1;
  void clear_loginsuccess();
  static const int kLoginSuccessFieldNumber = 1;
  bool loginsuccess() const;
  void set_loginsuccess(bool value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.LoginAnswerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool loginsuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class JoinedRoomAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.JoinedRoomAnswerPacket) */ {
 public:
  JoinedRoomAnswerPacket();
  virtual ~JoinedRoomAnswerPacket();

  JoinedRoomAnswerPacket(const JoinedRoomAnswerPacket& from);
  JoinedRoomAnswerPacket(JoinedRoomAnswerPacket&& from) noexcept
    : JoinedRoomAnswerPacket() {
    *this = ::std::move(from);
  }

  inline JoinedRoomAnswerPacket& operator=(const JoinedRoomAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinedRoomAnswerPacket& operator=(JoinedRoomAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinedRoomAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinedRoomAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const JoinedRoomAnswerPacket*>(
               &_JoinedRoomAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(JoinedRoomAnswerPacket* other);
  friend void swap(JoinedRoomAnswerPacket& a, JoinedRoomAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinedRoomAnswerPacket* New() const final {
    return CreateMaybeMessage<JoinedRoomAnswerPacket>(nullptr);
  }

  JoinedRoomAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinedRoomAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinedRoomAnswerPacket& from);
  void MergeFrom(const JoinedRoomAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinedRoomAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.JoinedRoomAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roomName = 2;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 2;
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);

  // bool joinedRoomSuccess = 1;
  void clear_joinedroomsuccess();
  static const int kJoinedRoomSuccessFieldNumber = 1;
  bool joinedroomsuccess() const;
  void set_joinedroomsuccess(bool value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.JoinedRoomAnswerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  bool joinedroomsuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class RoomListAnswerPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.RoomListAnswerPacket) */ {
 public:
  RoomListAnswerPacket();
  virtual ~RoomListAnswerPacket();

  RoomListAnswerPacket(const RoomListAnswerPacket& from);
  RoomListAnswerPacket(RoomListAnswerPacket&& from) noexcept
    : RoomListAnswerPacket() {
    *this = ::std::move(from);
  }

  inline RoomListAnswerPacket& operator=(const RoomListAnswerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomListAnswerPacket& operator=(RoomListAnswerPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomListAnswerPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomListAnswerPacket* internal_default_instance() {
    return reinterpret_cast<const RoomListAnswerPacket*>(
               &_RoomListAnswerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RoomListAnswerPacket* other);
  friend void swap(RoomListAnswerPacket& a, RoomListAnswerPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomListAnswerPacket* New() const final {
    return CreateMaybeMessage<RoomListAnswerPacket>(nullptr);
  }

  RoomListAnswerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomListAnswerPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomListAnswerPacket& from);
  void MergeFrom(const RoomListAnswerPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomListAnswerPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.RoomListAnswerPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 roomCount = 1;
  void clear_roomcount();
  static const int kRoomCountFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcount() const;
  void set_roomcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.RoomListAnswerPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TypePacket

// .JIGAPPacket.PacketType type = 1;
inline void TypePacket::clear_type() {
  type_ = 0;
}
inline ::JIGAPPacket::PacketType TypePacket::type() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.TypePacket.type)
  return static_cast< ::JIGAPPacket::PacketType >(type_);
}
inline void TypePacket::set_type(::JIGAPPacket::PacketType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.TypePacket.type)
}

// -------------------------------------------------------------------

// StringPacket

// string str = 1;
inline void StringPacket::clear_str() {
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StringPacket::str() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.StringPacket.str)
  return str_.GetNoArena();
}
inline void StringPacket::set_str(const std::string& value) {
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.StringPacket.str)
}
inline void StringPacket::set_str(std::string&& value) {
  
  str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.StringPacket.str)
}
inline void StringPacket::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.StringPacket.str)
}
inline void StringPacket::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.StringPacket.str)
}
inline std::string* StringPacket::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.StringPacket.str)
  return str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StringPacket::release_str() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.StringPacket.str)
  
  return str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StringPacket::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.StringPacket.str)
}

// -------------------------------------------------------------------

// LoginAnswerPacket

// bool loginSuccess = 1;
inline void LoginAnswerPacket::clear_loginsuccess() {
  loginsuccess_ = false;
}
inline bool LoginAnswerPacket::loginsuccess() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.LoginAnswerPacket.loginSuccess)
  return loginsuccess_;
}
inline void LoginAnswerPacket::set_loginsuccess(bool value) {
  
  loginsuccess_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.LoginAnswerPacket.loginSuccess)
}

// -------------------------------------------------------------------

// JoinedRoomAnswerPacket

// bool joinedRoomSuccess = 1;
inline void JoinedRoomAnswerPacket::clear_joinedroomsuccess() {
  joinedroomsuccess_ = false;
}
inline bool JoinedRoomAnswerPacket::joinedroomsuccess() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinedRoomAnswerPacket.joinedRoomSuccess)
  return joinedroomsuccess_;
}
inline void JoinedRoomAnswerPacket::set_joinedroomsuccess(bool value) {
  
  joinedroomsuccess_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.JoinedRoomAnswerPacket.joinedRoomSuccess)
}

// string roomName = 2;
inline void JoinedRoomAnswerPacket::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JoinedRoomAnswerPacket::roomname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
  return roomname_.GetNoArena();
}
inline void JoinedRoomAnswerPacket::set_roomname(const std::string& value) {
  
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
}
inline void JoinedRoomAnswerPacket::set_roomname(std::string&& value) {
  
  roomname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
}
inline void JoinedRoomAnswerPacket::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
}
inline void JoinedRoomAnswerPacket::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
}
inline std::string* JoinedRoomAnswerPacket::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
  return roomname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinedRoomAnswerPacket::release_roomname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
  
  return roomname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinedRoomAnswerPacket::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.JoinedRoomAnswerPacket.roomName)
}

// -------------------------------------------------------------------

// RoomListAnswerPacket

// int32 roomCount = 1;
inline void RoomListAnswerPacket::clear_roomcount() {
  roomcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomListAnswerPacket::roomcount() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.RoomListAnswerPacket.roomCount)
  return roomcount_;
}
inline void RoomListAnswerPacket::set_roomcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomcount_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.RoomListAnswerPacket.roomCount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace JIGAPPacket

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JIGAPPacket::PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JIGAPPacket::PacketType>() {
  return ::JIGAPPacket::PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
