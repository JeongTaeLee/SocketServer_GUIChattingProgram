// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JIGAPPacket.proto

#include "JIGAPPacket.pb.h"

#include "pch.h"
#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_JIGAPPacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomInfoPacket_JIGAPPacket_2eproto;
namespace JIGAPPacket {
class MessageHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageHeader> _instance;
} _MessageHeader_default_instance_;
class LoginRequestPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRequestPacket> _instance;
} _LoginRequestPacket_default_instance_;
class LoginAnswerPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginAnswerPacket> _instance;
} _LoginAnswerPacket_default_instance_;
class RoomInfoPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomInfoPacket> _instance;
} _RoomInfoPacket_default_instance_;
class CreateRoomAnswerPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRoomAnswerPacket> _instance;
} _CreateRoomAnswerPacket_default_instance_;
class JoinRoomAnswerPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinRoomAnswerPacket> _instance;
} _JoinRoomAnswerPacket_default_instance_;
class RoomListAnswerPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomListAnswerPacket> _instance;
} _RoomListAnswerPacket_default_instance_;
class ChattingPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChattingPacket> _instance;
} _ChattingPacket_default_instance_;
class BaseRequestPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseRequestPacket> _instance;
} _BaseRequestPacket_default_instance_;
class BaseAsnwerPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseAsnwerPacket> _instance;
} _BaseAsnwerPacket_default_instance_;
}  // namespace JIGAPPacket
static void InitDefaultsscc_info_BaseAsnwerPacket_JIGAPPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JIGAPPacket::_BaseAsnwerPacket_default_instance_;
    new (ptr) ::JIGAPPacket::BaseAsnwerPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JIGAPPacket::BaseAsnwerPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseAsnwerPacket_JIGAPPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BaseAsnwerPacket_JIGAPPacket_2eproto}, {}};

static void InitDefaultsscc_info_BaseRequestPacket_JIGAPPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JIGAPPacket::_BaseRequestPacket_default_instance_;
    new (ptr) ::JIGAPPacket::BaseRequestPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JIGAPPacket::BaseRequestPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseRequestPacket_JIGAPPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BaseRequestPacket_JIGAPPacket_2eproto}, {}};

static void InitDefaultsscc_info_ChattingPacket_JIGAPPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JIGAPPacket::_ChattingPacket_default_instance_;
    new (ptr) ::JIGAPPacket::ChattingPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JIGAPPacket::ChattingPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChattingPacket_JIGAPPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChattingPacket_JIGAPPacket_2eproto}, {}};

static void InitDefaultsscc_info_CreateRoomAnswerPacket_JIGAPPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JIGAPPacket::_CreateRoomAnswerPacket_default_instance_;
    new (ptr) ::JIGAPPacket::CreateRoomAnswerPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JIGAPPacket::CreateRoomAnswerPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateRoomAnswerPacket_JIGAPPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CreateRoomAnswerPacket_JIGAPPacket_2eproto}, {
      &scc_info_RoomInfoPacket_JIGAPPacket_2eproto.base,}};

static void InitDefaultsscc_info_JoinRoomAnswerPacket_JIGAPPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JIGAPPacket::_JoinRoomAnswerPacket_default_instance_;
    new (ptr) ::JIGAPPacket::JoinRoomAnswerPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JIGAPPacket::JoinRoomAnswerPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinRoomAnswerPacket_JIGAPPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_JoinRoomAnswerPacket_JIGAPPacket_2eproto}, {
      &scc_info_RoomInfoPacket_JIGAPPacket_2eproto.base,}};

static void InitDefaultsscc_info_LoginAnswerPacket_JIGAPPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JIGAPPacket::_LoginAnswerPacket_default_instance_;
    new (ptr) ::JIGAPPacket::LoginAnswerPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JIGAPPacket::LoginAnswerPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginAnswerPacket_JIGAPPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoginAnswerPacket_JIGAPPacket_2eproto}, {}};

static void InitDefaultsscc_info_LoginRequestPacket_JIGAPPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JIGAPPacket::_LoginRequestPacket_default_instance_;
    new (ptr) ::JIGAPPacket::LoginRequestPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JIGAPPacket::LoginRequestPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginRequestPacket_JIGAPPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LoginRequestPacket_JIGAPPacket_2eproto}, {}};

static void InitDefaultsscc_info_MessageHeader_JIGAPPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JIGAPPacket::_MessageHeader_default_instance_;
    new (ptr) ::JIGAPPacket::MessageHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JIGAPPacket::MessageHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageHeader_JIGAPPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MessageHeader_JIGAPPacket_2eproto}, {}};

static void InitDefaultsscc_info_RoomInfoPacket_JIGAPPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JIGAPPacket::_RoomInfoPacket_default_instance_;
    new (ptr) ::JIGAPPacket::RoomInfoPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JIGAPPacket::RoomInfoPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomInfoPacket_JIGAPPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoomInfoPacket_JIGAPPacket_2eproto}, {}};

static void InitDefaultsscc_info_RoomListAnswerPacket_JIGAPPacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JIGAPPacket::_RoomListAnswerPacket_default_instance_;
    new (ptr) ::JIGAPPacket::RoomListAnswerPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JIGAPPacket::RoomListAnswerPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomListAnswerPacket_JIGAPPacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RoomListAnswerPacket_JIGAPPacket_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_JIGAPPacket_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_JIGAPPacket_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_JIGAPPacket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_JIGAPPacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::MessageHeader, type_),
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::MessageHeader, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::LoginRequestPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::LoginRequestPacket, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::LoginAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::LoginAnswerPacket, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::RoomInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::RoomInfoPacket, roomname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::CreateRoomAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::CreateRoomAnswerPacket, roominfo_),
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::CreateRoomAnswerPacket, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::JoinRoomAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::JoinRoomAnswerPacket, roominfo_),
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::JoinRoomAnswerPacket, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::RoomListAnswerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::RoomListAnswerPacket, roomcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::ChattingPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::ChattingPacket, sender_),
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::ChattingPacket, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::BaseRequestPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::BaseRequestPacket, packettype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::BaseAsnwerPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JIGAPPacket::BaseAsnwerPacket, packettype_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::JIGAPPacket::MessageHeader)},
  { 7, -1, sizeof(::JIGAPPacket::LoginRequestPacket)},
  { 13, -1, sizeof(::JIGAPPacket::LoginAnswerPacket)},
  { 19, -1, sizeof(::JIGAPPacket::RoomInfoPacket)},
  { 25, -1, sizeof(::JIGAPPacket::CreateRoomAnswerPacket)},
  { 32, -1, sizeof(::JIGAPPacket::JoinRoomAnswerPacket)},
  { 39, -1, sizeof(::JIGAPPacket::RoomListAnswerPacket)},
  { 45, -1, sizeof(::JIGAPPacket::ChattingPacket)},
  { 52, -1, sizeof(::JIGAPPacket::BaseRequestPacket)},
  { 58, -1, sizeof(::JIGAPPacket::BaseAsnwerPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JIGAPPacket::_MessageHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JIGAPPacket::_LoginRequestPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JIGAPPacket::_LoginAnswerPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JIGAPPacket::_RoomInfoPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JIGAPPacket::_CreateRoomAnswerPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JIGAPPacket::_JoinRoomAnswerPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JIGAPPacket::_RoomListAnswerPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JIGAPPacket::_ChattingPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JIGAPPacket::_BaseRequestPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JIGAPPacket::_BaseAsnwerPacket_default_instance_),
};

const char descriptor_table_protodef_JIGAPPacket_2eproto[] =
  "\n\021JIGAPPacket.proto\022\013JIGAPPacket\"D\n\rMess"
  "ageHeader\022%\n\004type\030\001 \001(\0162\027.JIGAPPacket.Pa"
  "cketType\022\014\n\004size\030\002 \001(\005\" \n\022LoginRequestPa"
  "cket\022\n\n\002id\030\001 \001(\t\"$\n\021LoginAnswerPacket\022\017\n"
  "\007success\030\001 \001(\010\"\"\n\016RoomInfoPacket\022\020\n\010room"
  "name\030\001 \001(\t\"X\n\026CreateRoomAnswerPacket\022-\n\010"
  "roomInfo\030\001 \001(\0132\033.JIGAPPacket.RoomInfoPac"
  "ket\022\017\n\007success\030\002 \001(\010\"V\n\024JoinRoomAnswerPa"
  "cket\022-\n\010roomInfo\030\001 \001(\0132\033.JIGAPPacket.Roo"
  "mInfoPacket\022\017\n\007success\030\002 \001(\010\")\n\024RoomList"
  "AnswerPacket\022\021\n\troomcount\030\001 \001(\005\"-\n\016Chatt"
  "ingPacket\022\016\n\006sender\030\001 \001(\t\022\013\n\003msg\030\002 \001(\t\"@"
  "\n\021BaseRequestPacket\022+\n\npackettype\030\001 \001(\0162"
  "\027.JIGAPPacket.PacketType\"\?\n\020BaseAsnwerPa"
  "cket\022+\n\npackettype\030\001 \001(\0162\027.JIGAPPacket.P"
  "acketType*\276\002\n\nPacketType\022\020\n\014LoginRequest"
  "\020\000\022\017\n\013LoginAnswer\020\001\022\023\n\017JoinRoomRequest\020\002"
  "\022\022\n\016JoinRoomAnswer\020\003\022\025\n\021CreateRoomReques"
  "t\020\004\022\024\n\020CreateRoomAsnwer\020\005\022\023\n\017RoomListReq"
  "uest\020\006\022\022\n\016RoomListAnswer\020\007\022\023\n\017RoomListEl"
  "ement\020\010\022\023\n\017ExitRoomRequest\020\t\022\022\n\016ExitRoom"
  "Answer\020\n\022\023\n\017ChattingRequest\020\013\022\022\n\016Chattin"
  "gSpread\020\014\022\023\n\017PlayerEnterRoom\020\r\022\022\n\016Player"
  "ExitRoom\020\016b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_JIGAPPacket_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_JIGAPPacket_2eproto_sccs[10] = {
  &scc_info_BaseAsnwerPacket_JIGAPPacket_2eproto.base,
  &scc_info_BaseRequestPacket_JIGAPPacket_2eproto.base,
  &scc_info_ChattingPacket_JIGAPPacket_2eproto.base,
  &scc_info_CreateRoomAnswerPacket_JIGAPPacket_2eproto.base,
  &scc_info_JoinRoomAnswerPacket_JIGAPPacket_2eproto.base,
  &scc_info_LoginAnswerPacket_JIGAPPacket_2eproto.base,
  &scc_info_LoginRequestPacket_JIGAPPacket_2eproto.base,
  &scc_info_MessageHeader_JIGAPPacket_2eproto.base,
  &scc_info_RoomInfoPacket_JIGAPPacket_2eproto.base,
  &scc_info_RoomListAnswerPacket_JIGAPPacket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_JIGAPPacket_2eproto_once;
static bool descriptor_table_JIGAPPacket_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JIGAPPacket_2eproto = {
  &descriptor_table_JIGAPPacket_2eproto_initialized, descriptor_table_protodef_JIGAPPacket_2eproto, "JIGAPPacket.proto", 938,
  &descriptor_table_JIGAPPacket_2eproto_once, descriptor_table_JIGAPPacket_2eproto_sccs, descriptor_table_JIGAPPacket_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_JIGAPPacket_2eproto::offsets,
  file_level_metadata_JIGAPPacket_2eproto, 10, file_level_enum_descriptors_JIGAPPacket_2eproto, file_level_service_descriptors_JIGAPPacket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_JIGAPPacket_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_JIGAPPacket_2eproto), true);
namespace JIGAPPacket {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_JIGAPPacket_2eproto);
  return file_level_enum_descriptors_JIGAPPacket_2eproto[0];
}
bool PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MessageHeader::InitAsDefaultInstance() {
}
class MessageHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageHeader::kTypeFieldNumber;
const int MessageHeader::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageHeader::MessageHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JIGAPPacket.MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:JIGAPPacket.MessageHeader)
}

void MessageHeader::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(size_));
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:JIGAPPacket.MessageHeader)
  SharedDtor();
}

void MessageHeader::SharedDtor() {
}

void MessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageHeader& MessageHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageHeader_JIGAPPacket_2eproto.base);
  return *internal_default_instance();
}


void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:JIGAPPacket.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .JIGAPPacket.PacketType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::JIGAPPacket::PacketType>(val));
        } else goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JIGAPPacket.MessageHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .JIGAPPacket.PacketType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::JIGAPPacket::PacketType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JIGAPPacket.MessageHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JIGAPPacket.MessageHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JIGAPPacket.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JIGAPPacket.PacketType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JIGAPPacket.MessageHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JIGAPPacket.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JIGAPPacket.PacketType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 size = 2;
  if (this->size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JIGAPPacket.MessageHeader)
  return target;
}

size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JIGAPPacket.MessageHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .JIGAPPacket.PacketType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JIGAPPacket.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JIGAPPacket.MessageHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JIGAPPacket.MessageHeader)
    MergeFrom(*source);
  }
}

void MessageHeader::MergeFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JIGAPPacket.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void MessageHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JIGAPPacket.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JIGAPPacket.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  return true;
}

void MessageHeader::Swap(MessageHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginRequestPacket::InitAsDefaultInstance() {
}
class LoginRequestPacket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequestPacket::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequestPacket::LoginRequestPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JIGAPPacket.LoginRequestPacket)
}
LoginRequestPacket::LoginRequestPacket(const LoginRequestPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:JIGAPPacket.LoginRequestPacket)
}

void LoginRequestPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginRequestPacket_JIGAPPacket_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginRequestPacket::~LoginRequestPacket() {
  // @@protoc_insertion_point(destructor:JIGAPPacket.LoginRequestPacket)
  SharedDtor();
}

void LoginRequestPacket::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginRequestPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequestPacket& LoginRequestPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRequestPacket_JIGAPPacket_2eproto.base);
  return *internal_default_instance();
}


void LoginRequestPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:JIGAPPacket.LoginRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginRequestPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "JIGAPPacket.LoginRequestPacket.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginRequestPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JIGAPPacket.LoginRequestPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JIGAPPacket.LoginRequestPacket.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JIGAPPacket.LoginRequestPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JIGAPPacket.LoginRequestPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginRequestPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JIGAPPacket.LoginRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JIGAPPacket.LoginRequestPacket.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JIGAPPacket.LoginRequestPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequestPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JIGAPPacket.LoginRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JIGAPPacket.LoginRequestPacket.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JIGAPPacket.LoginRequestPacket)
  return target;
}

size_t LoginRequestPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JIGAPPacket.LoginRequestPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequestPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JIGAPPacket.LoginRequestPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequestPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequestPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JIGAPPacket.LoginRequestPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JIGAPPacket.LoginRequestPacket)
    MergeFrom(*source);
  }
}

void LoginRequestPacket::MergeFrom(const LoginRequestPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JIGAPPacket.LoginRequestPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void LoginRequestPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JIGAPPacket.LoginRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequestPacket::CopyFrom(const LoginRequestPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JIGAPPacket.LoginRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestPacket::IsInitialized() const {
  return true;
}

void LoginRequestPacket::Swap(LoginRequestPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequestPacket::InternalSwap(LoginRequestPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequestPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginAnswerPacket::InitAsDefaultInstance() {
}
class LoginAnswerPacket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAnswerPacket::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAnswerPacket::LoginAnswerPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JIGAPPacket.LoginAnswerPacket)
}
LoginAnswerPacket::LoginAnswerPacket(const LoginAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:JIGAPPacket.LoginAnswerPacket)
}

void LoginAnswerPacket::SharedCtor() {
  success_ = false;
}

LoginAnswerPacket::~LoginAnswerPacket() {
  // @@protoc_insertion_point(destructor:JIGAPPacket.LoginAnswerPacket)
  SharedDtor();
}

void LoginAnswerPacket::SharedDtor() {
}

void LoginAnswerPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginAnswerPacket& LoginAnswerPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginAnswerPacket_JIGAPPacket_2eproto.base);
  return *internal_default_instance();
}


void LoginAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:JIGAPPacket.LoginAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoginAnswerPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoginAnswerPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JIGAPPacket.LoginAnswerPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JIGAPPacket.LoginAnswerPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JIGAPPacket.LoginAnswerPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoginAnswerPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JIGAPPacket.LoginAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JIGAPPacket.LoginAnswerPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginAnswerPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JIGAPPacket.LoginAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JIGAPPacket.LoginAnswerPacket)
  return target;
}

size_t LoginAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JIGAPPacket.LoginAnswerPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginAnswerPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JIGAPPacket.LoginAnswerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAnswerPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginAnswerPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JIGAPPacket.LoginAnswerPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JIGAPPacket.LoginAnswerPacket)
    MergeFrom(*source);
  }
}

void LoginAnswerPacket::MergeFrom(const LoginAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JIGAPPacket.LoginAnswerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void LoginAnswerPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JIGAPPacket.LoginAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAnswerPacket::CopyFrom(const LoginAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JIGAPPacket.LoginAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAnswerPacket::IsInitialized() const {
  return true;
}

void LoginAnswerPacket::Swap(LoginAnswerPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAnswerPacket::InternalSwap(LoginAnswerPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginAnswerPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomInfoPacket::InitAsDefaultInstance() {
}
class RoomInfoPacket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomInfoPacket::kRoomnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomInfoPacket::RoomInfoPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JIGAPPacket.RoomInfoPacket)
}
RoomInfoPacket::RoomInfoPacket(const RoomInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.roomname().size() > 0) {
    roomname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  // @@protoc_insertion_point(copy_constructor:JIGAPPacket.RoomInfoPacket)
}

void RoomInfoPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoomInfoPacket_JIGAPPacket_2eproto.base);
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoomInfoPacket::~RoomInfoPacket() {
  // @@protoc_insertion_point(destructor:JIGAPPacket.RoomInfoPacket)
  SharedDtor();
}

void RoomInfoPacket::SharedDtor() {
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomInfoPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomInfoPacket& RoomInfoPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomInfoPacket_JIGAPPacket_2eproto.base);
  return *internal_default_instance();
}


void RoomInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:JIGAPPacket.RoomInfoPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomInfoPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string roomname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_roomname(), ptr, ctx, "JIGAPPacket.RoomInfoPacket.roomname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomInfoPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JIGAPPacket.RoomInfoPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string roomname = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), static_cast<int>(this->roomname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JIGAPPacket.RoomInfoPacket.roomname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JIGAPPacket.RoomInfoPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JIGAPPacket.RoomInfoPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomInfoPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JIGAPPacket.RoomInfoPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomname = 1;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JIGAPPacket.RoomInfoPacket.roomname");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JIGAPPacket.RoomInfoPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomInfoPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JIGAPPacket.RoomInfoPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomname = 1;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JIGAPPacket.RoomInfoPacket.roomname");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->roomname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JIGAPPacket.RoomInfoPacket)
  return target;
}

size_t RoomInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JIGAPPacket.RoomInfoPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomname = 1;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInfoPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JIGAPPacket.RoomInfoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInfoPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomInfoPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JIGAPPacket.RoomInfoPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JIGAPPacket.RoomInfoPacket)
    MergeFrom(*source);
  }
}

void RoomInfoPacket::MergeFrom(const RoomInfoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JIGAPPacket.RoomInfoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
}

void RoomInfoPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JIGAPPacket.RoomInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfoPacket::CopyFrom(const RoomInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JIGAPPacket.RoomInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfoPacket::IsInitialized() const {
  return true;
}

void RoomInfoPacket::Swap(RoomInfoPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomInfoPacket::InternalSwap(RoomInfoPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfoPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateRoomAnswerPacket::InitAsDefaultInstance() {
  ::JIGAPPacket::_CreateRoomAnswerPacket_default_instance_._instance.get_mutable()->roominfo_ = const_cast< ::JIGAPPacket::RoomInfoPacket*>(
      ::JIGAPPacket::RoomInfoPacket::internal_default_instance());
}
class CreateRoomAnswerPacket::HasBitSetters {
 public:
  static const ::JIGAPPacket::RoomInfoPacket& roominfo(const CreateRoomAnswerPacket* msg);
};

const ::JIGAPPacket::RoomInfoPacket&
CreateRoomAnswerPacket::HasBitSetters::roominfo(const CreateRoomAnswerPacket* msg) {
  return *msg->roominfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoomAnswerPacket::kRoomInfoFieldNumber;
const int CreateRoomAnswerPacket::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoomAnswerPacket::CreateRoomAnswerPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JIGAPPacket.CreateRoomAnswerPacket)
}
CreateRoomAnswerPacket::CreateRoomAnswerPacket(const CreateRoomAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_roominfo()) {
    roominfo_ = new ::JIGAPPacket::RoomInfoPacket(*from.roominfo_);
  } else {
    roominfo_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:JIGAPPacket.CreateRoomAnswerPacket)
}

void CreateRoomAnswerPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateRoomAnswerPacket_JIGAPPacket_2eproto.base);
  ::memset(&roominfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&roominfo_)) + sizeof(success_));
}

CreateRoomAnswerPacket::~CreateRoomAnswerPacket() {
  // @@protoc_insertion_point(destructor:JIGAPPacket.CreateRoomAnswerPacket)
  SharedDtor();
}

void CreateRoomAnswerPacket::SharedDtor() {
  if (this != internal_default_instance()) delete roominfo_;
}

void CreateRoomAnswerPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRoomAnswerPacket& CreateRoomAnswerPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRoomAnswerPacket_JIGAPPacket_2eproto.base);
  return *internal_default_instance();
}


void CreateRoomAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:JIGAPPacket.CreateRoomAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateRoomAnswerPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_roominfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateRoomAnswerPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JIGAPPacket.CreateRoomAnswerPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JIGAPPacket.CreateRoomAnswerPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JIGAPPacket.CreateRoomAnswerPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateRoomAnswerPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JIGAPPacket.CreateRoomAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
  if (this->has_roominfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::roominfo(this), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JIGAPPacket.CreateRoomAnswerPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRoomAnswerPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JIGAPPacket.CreateRoomAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
  if (this->has_roominfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::roominfo(this), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JIGAPPacket.CreateRoomAnswerPacket)
  return target;
}

size_t CreateRoomAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JIGAPPacket.CreateRoomAnswerPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roominfo_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRoomAnswerPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JIGAPPacket.CreateRoomAnswerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoomAnswerPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRoomAnswerPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JIGAPPacket.CreateRoomAnswerPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JIGAPPacket.CreateRoomAnswerPacket)
    MergeFrom(*source);
  }
}

void CreateRoomAnswerPacket::MergeFrom(const CreateRoomAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JIGAPPacket.CreateRoomAnswerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roominfo()) {
    mutable_roominfo()->::JIGAPPacket::RoomInfoPacket::MergeFrom(from.roominfo());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void CreateRoomAnswerPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JIGAPPacket.CreateRoomAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomAnswerPacket::CopyFrom(const CreateRoomAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JIGAPPacket.CreateRoomAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomAnswerPacket::IsInitialized() const {
  return true;
}

void CreateRoomAnswerPacket::Swap(CreateRoomAnswerPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRoomAnswerPacket::InternalSwap(CreateRoomAnswerPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roominfo_, other->roominfo_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomAnswerPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinRoomAnswerPacket::InitAsDefaultInstance() {
  ::JIGAPPacket::_JoinRoomAnswerPacket_default_instance_._instance.get_mutable()->roominfo_ = const_cast< ::JIGAPPacket::RoomInfoPacket*>(
      ::JIGAPPacket::RoomInfoPacket::internal_default_instance());
}
class JoinRoomAnswerPacket::HasBitSetters {
 public:
  static const ::JIGAPPacket::RoomInfoPacket& roominfo(const JoinRoomAnswerPacket* msg);
};

const ::JIGAPPacket::RoomInfoPacket&
JoinRoomAnswerPacket::HasBitSetters::roominfo(const JoinRoomAnswerPacket* msg) {
  return *msg->roominfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomAnswerPacket::kRoomInfoFieldNumber;
const int JoinRoomAnswerPacket::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomAnswerPacket::JoinRoomAnswerPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JIGAPPacket.JoinRoomAnswerPacket)
}
JoinRoomAnswerPacket::JoinRoomAnswerPacket(const JoinRoomAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_roominfo()) {
    roominfo_ = new ::JIGAPPacket::RoomInfoPacket(*from.roominfo_);
  } else {
    roominfo_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:JIGAPPacket.JoinRoomAnswerPacket)
}

void JoinRoomAnswerPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinRoomAnswerPacket_JIGAPPacket_2eproto.base);
  ::memset(&roominfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&roominfo_)) + sizeof(success_));
}

JoinRoomAnswerPacket::~JoinRoomAnswerPacket() {
  // @@protoc_insertion_point(destructor:JIGAPPacket.JoinRoomAnswerPacket)
  SharedDtor();
}

void JoinRoomAnswerPacket::SharedDtor() {
  if (this != internal_default_instance()) delete roominfo_;
}

void JoinRoomAnswerPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinRoomAnswerPacket& JoinRoomAnswerPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinRoomAnswerPacket_JIGAPPacket_2eproto.base);
  return *internal_default_instance();
}


void JoinRoomAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:JIGAPPacket.JoinRoomAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JoinRoomAnswerPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_roominfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JoinRoomAnswerPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JIGAPPacket.JoinRoomAnswerPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JIGAPPacket.JoinRoomAnswerPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JIGAPPacket.JoinRoomAnswerPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JoinRoomAnswerPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JIGAPPacket.JoinRoomAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
  if (this->has_roominfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::roominfo(this), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JIGAPPacket.JoinRoomAnswerPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinRoomAnswerPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JIGAPPacket.JoinRoomAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
  if (this->has_roominfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::roominfo(this), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JIGAPPacket.JoinRoomAnswerPacket)
  return target;
}

size_t JoinRoomAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JIGAPPacket.JoinRoomAnswerPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .JIGAPPacket.RoomInfoPacket roomInfo = 1;
  if (this->has_roominfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roominfo_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinRoomAnswerPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JIGAPPacket.JoinRoomAnswerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRoomAnswerPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinRoomAnswerPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JIGAPPacket.JoinRoomAnswerPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JIGAPPacket.JoinRoomAnswerPacket)
    MergeFrom(*source);
  }
}

void JoinRoomAnswerPacket::MergeFrom(const JoinRoomAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JIGAPPacket.JoinRoomAnswerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roominfo()) {
    mutable_roominfo()->::JIGAPPacket::RoomInfoPacket::MergeFrom(from.roominfo());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void JoinRoomAnswerPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JIGAPPacket.JoinRoomAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomAnswerPacket::CopyFrom(const JoinRoomAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JIGAPPacket.JoinRoomAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomAnswerPacket::IsInitialized() const {
  return true;
}

void JoinRoomAnswerPacket::Swap(JoinRoomAnswerPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomAnswerPacket::InternalSwap(JoinRoomAnswerPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roominfo_, other->roominfo_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRoomAnswerPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomListAnswerPacket::InitAsDefaultInstance() {
}
class RoomListAnswerPacket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomListAnswerPacket::kRoomcountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomListAnswerPacket::RoomListAnswerPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JIGAPPacket.RoomListAnswerPacket)
}
RoomListAnswerPacket::RoomListAnswerPacket(const RoomListAnswerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomcount_ = from.roomcount_;
  // @@protoc_insertion_point(copy_constructor:JIGAPPacket.RoomListAnswerPacket)
}

void RoomListAnswerPacket::SharedCtor() {
  roomcount_ = 0;
}

RoomListAnswerPacket::~RoomListAnswerPacket() {
  // @@protoc_insertion_point(destructor:JIGAPPacket.RoomListAnswerPacket)
  SharedDtor();
}

void RoomListAnswerPacket::SharedDtor() {
}

void RoomListAnswerPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomListAnswerPacket& RoomListAnswerPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomListAnswerPacket_JIGAPPacket_2eproto.base);
  return *internal_default_instance();
}


void RoomListAnswerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:JIGAPPacket.RoomListAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomcount_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoomListAnswerPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 roomcount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoomListAnswerPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JIGAPPacket.RoomListAnswerPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 roomcount = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JIGAPPacket.RoomListAnswerPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JIGAPPacket.RoomListAnswerPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoomListAnswerPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JIGAPPacket.RoomListAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomcount = 1;
  if (this->roomcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->roomcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JIGAPPacket.RoomListAnswerPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomListAnswerPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JIGAPPacket.RoomListAnswerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomcount = 1;
  if (this->roomcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->roomcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JIGAPPacket.RoomListAnswerPacket)
  return target;
}

size_t RoomListAnswerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JIGAPPacket.RoomListAnswerPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomcount = 1;
  if (this->roomcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->roomcount());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomListAnswerPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JIGAPPacket.RoomListAnswerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomListAnswerPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomListAnswerPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JIGAPPacket.RoomListAnswerPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JIGAPPacket.RoomListAnswerPacket)
    MergeFrom(*source);
  }
}

void RoomListAnswerPacket::MergeFrom(const RoomListAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JIGAPPacket.RoomListAnswerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomcount() != 0) {
    set_roomcount(from.roomcount());
  }
}

void RoomListAnswerPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JIGAPPacket.RoomListAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomListAnswerPacket::CopyFrom(const RoomListAnswerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JIGAPPacket.RoomListAnswerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomListAnswerPacket::IsInitialized() const {
  return true;
}

void RoomListAnswerPacket::Swap(RoomListAnswerPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomListAnswerPacket::InternalSwap(RoomListAnswerPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roomcount_, other->roomcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomListAnswerPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChattingPacket::InitAsDefaultInstance() {
}
class ChattingPacket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChattingPacket::kSenderFieldNumber;
const int ChattingPacket::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChattingPacket::ChattingPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JIGAPPacket.ChattingPacket)
}
ChattingPacket::ChattingPacket(const ChattingPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:JIGAPPacket.ChattingPacket)
}

void ChattingPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChattingPacket_JIGAPPacket_2eproto.base);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChattingPacket::~ChattingPacket() {
  // @@protoc_insertion_point(destructor:JIGAPPacket.ChattingPacket)
  SharedDtor();
}

void ChattingPacket::SharedDtor() {
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChattingPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChattingPacket& ChattingPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChattingPacket_JIGAPPacket_2eproto.base);
  return *internal_default_instance();
}


void ChattingPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:JIGAPPacket.ChattingPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChattingPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sender(), ptr, ctx, "JIGAPPacket.ChattingPacket.sender");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "JIGAPPacket.ChattingPacket.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChattingPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JIGAPPacket.ChattingPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sender = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JIGAPPacket.ChattingPacket.sender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JIGAPPacket.ChattingPacket.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JIGAPPacket.ChattingPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JIGAPPacket.ChattingPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChattingPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JIGAPPacket.ChattingPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (this->sender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JIGAPPacket.ChattingPacket.sender");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JIGAPPacket.ChattingPacket.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JIGAPPacket.ChattingPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChattingPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JIGAPPacket.ChattingPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (this->sender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JIGAPPacket.ChattingPacket.sender");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JIGAPPacket.ChattingPacket.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JIGAPPacket.ChattingPacket)
  return target;
}

size_t ChattingPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JIGAPPacket.ChattingPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sender());
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChattingPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JIGAPPacket.ChattingPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const ChattingPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChattingPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JIGAPPacket.ChattingPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JIGAPPacket.ChattingPacket)
    MergeFrom(*source);
  }
}

void ChattingPacket::MergeFrom(const ChattingPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JIGAPPacket.ChattingPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ChattingPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JIGAPPacket.ChattingPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChattingPacket::CopyFrom(const ChattingPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JIGAPPacket.ChattingPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChattingPacket::IsInitialized() const {
  return true;
}

void ChattingPacket::Swap(ChattingPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChattingPacket::InternalSwap(ChattingPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sender_.Swap(&other->sender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChattingPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseRequestPacket::InitAsDefaultInstance() {
}
class BaseRequestPacket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseRequestPacket::kPackettypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseRequestPacket::BaseRequestPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JIGAPPacket.BaseRequestPacket)
}
BaseRequestPacket::BaseRequestPacket(const BaseRequestPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packettype_ = from.packettype_;
  // @@protoc_insertion_point(copy_constructor:JIGAPPacket.BaseRequestPacket)
}

void BaseRequestPacket::SharedCtor() {
  packettype_ = 0;
}

BaseRequestPacket::~BaseRequestPacket() {
  // @@protoc_insertion_point(destructor:JIGAPPacket.BaseRequestPacket)
  SharedDtor();
}

void BaseRequestPacket::SharedDtor() {
}

void BaseRequestPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseRequestPacket& BaseRequestPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseRequestPacket_JIGAPPacket_2eproto.base);
  return *internal_default_instance();
}


void BaseRequestPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:JIGAPPacket.BaseRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packettype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BaseRequestPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .JIGAPPacket.PacketType packettype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_packettype(static_cast<::JIGAPPacket::PacketType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BaseRequestPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JIGAPPacket.BaseRequestPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .JIGAPPacket.PacketType packettype = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_packettype(static_cast< ::JIGAPPacket::PacketType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JIGAPPacket.BaseRequestPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JIGAPPacket.BaseRequestPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BaseRequestPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JIGAPPacket.BaseRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JIGAPPacket.PacketType packettype = 1;
  if (this->packettype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->packettype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JIGAPPacket.BaseRequestPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseRequestPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JIGAPPacket.BaseRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JIGAPPacket.PacketType packettype = 1;
  if (this->packettype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->packettype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JIGAPPacket.BaseRequestPacket)
  return target;
}

size_t BaseRequestPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JIGAPPacket.BaseRequestPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .JIGAPPacket.PacketType packettype = 1;
  if (this->packettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->packettype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseRequestPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JIGAPPacket.BaseRequestPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseRequestPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseRequestPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JIGAPPacket.BaseRequestPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JIGAPPacket.BaseRequestPacket)
    MergeFrom(*source);
  }
}

void BaseRequestPacket::MergeFrom(const BaseRequestPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JIGAPPacket.BaseRequestPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packettype() != 0) {
    set_packettype(from.packettype());
  }
}

void BaseRequestPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JIGAPPacket.BaseRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseRequestPacket::CopyFrom(const BaseRequestPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JIGAPPacket.BaseRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRequestPacket::IsInitialized() const {
  return true;
}

void BaseRequestPacket::Swap(BaseRequestPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseRequestPacket::InternalSwap(BaseRequestPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(packettype_, other->packettype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseRequestPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseAsnwerPacket::InitAsDefaultInstance() {
}
class BaseAsnwerPacket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseAsnwerPacket::kPackettypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseAsnwerPacket::BaseAsnwerPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JIGAPPacket.BaseAsnwerPacket)
}
BaseAsnwerPacket::BaseAsnwerPacket(const BaseAsnwerPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packettype_ = from.packettype_;
  // @@protoc_insertion_point(copy_constructor:JIGAPPacket.BaseAsnwerPacket)
}

void BaseAsnwerPacket::SharedCtor() {
  packettype_ = 0;
}

BaseAsnwerPacket::~BaseAsnwerPacket() {
  // @@protoc_insertion_point(destructor:JIGAPPacket.BaseAsnwerPacket)
  SharedDtor();
}

void BaseAsnwerPacket::SharedDtor() {
}

void BaseAsnwerPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseAsnwerPacket& BaseAsnwerPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseAsnwerPacket_JIGAPPacket_2eproto.base);
  return *internal_default_instance();
}


void BaseAsnwerPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:JIGAPPacket.BaseAsnwerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packettype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BaseAsnwerPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .JIGAPPacket.PacketType packettype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_packettype(static_cast<::JIGAPPacket::PacketType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BaseAsnwerPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JIGAPPacket.BaseAsnwerPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .JIGAPPacket.PacketType packettype = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_packettype(static_cast< ::JIGAPPacket::PacketType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JIGAPPacket.BaseAsnwerPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JIGAPPacket.BaseAsnwerPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BaseAsnwerPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JIGAPPacket.BaseAsnwerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JIGAPPacket.PacketType packettype = 1;
  if (this->packettype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->packettype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JIGAPPacket.BaseAsnwerPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseAsnwerPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JIGAPPacket.BaseAsnwerPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JIGAPPacket.PacketType packettype = 1;
  if (this->packettype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->packettype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JIGAPPacket.BaseAsnwerPacket)
  return target;
}

size_t BaseAsnwerPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JIGAPPacket.BaseAsnwerPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .JIGAPPacket.PacketType packettype = 1;
  if (this->packettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->packettype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseAsnwerPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JIGAPPacket.BaseAsnwerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseAsnwerPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseAsnwerPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JIGAPPacket.BaseAsnwerPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JIGAPPacket.BaseAsnwerPacket)
    MergeFrom(*source);
  }
}

void BaseAsnwerPacket::MergeFrom(const BaseAsnwerPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JIGAPPacket.BaseAsnwerPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packettype() != 0) {
    set_packettype(from.packettype());
  }
}

void BaseAsnwerPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JIGAPPacket.BaseAsnwerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseAsnwerPacket::CopyFrom(const BaseAsnwerPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JIGAPPacket.BaseAsnwerPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseAsnwerPacket::IsInitialized() const {
  return true;
}

void BaseAsnwerPacket::Swap(BaseAsnwerPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseAsnwerPacket::InternalSwap(BaseAsnwerPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(packettype_, other->packettype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseAsnwerPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace JIGAPPacket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::JIGAPPacket::MessageHeader* Arena::CreateMaybeMessage< ::JIGAPPacket::MessageHeader >(Arena* arena) {
  return Arena::CreateInternal< ::JIGAPPacket::MessageHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::JIGAPPacket::LoginRequestPacket* Arena::CreateMaybeMessage< ::JIGAPPacket::LoginRequestPacket >(Arena* arena) {
  return Arena::CreateInternal< ::JIGAPPacket::LoginRequestPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::JIGAPPacket::LoginAnswerPacket* Arena::CreateMaybeMessage< ::JIGAPPacket::LoginAnswerPacket >(Arena* arena) {
  return Arena::CreateInternal< ::JIGAPPacket::LoginAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::JIGAPPacket::RoomInfoPacket* Arena::CreateMaybeMessage< ::JIGAPPacket::RoomInfoPacket >(Arena* arena) {
  return Arena::CreateInternal< ::JIGAPPacket::RoomInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::JIGAPPacket::CreateRoomAnswerPacket* Arena::CreateMaybeMessage< ::JIGAPPacket::CreateRoomAnswerPacket >(Arena* arena) {
  return Arena::CreateInternal< ::JIGAPPacket::CreateRoomAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::JIGAPPacket::JoinRoomAnswerPacket* Arena::CreateMaybeMessage< ::JIGAPPacket::JoinRoomAnswerPacket >(Arena* arena) {
  return Arena::CreateInternal< ::JIGAPPacket::JoinRoomAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::JIGAPPacket::RoomListAnswerPacket* Arena::CreateMaybeMessage< ::JIGAPPacket::RoomListAnswerPacket >(Arena* arena) {
  return Arena::CreateInternal< ::JIGAPPacket::RoomListAnswerPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::JIGAPPacket::ChattingPacket* Arena::CreateMaybeMessage< ::JIGAPPacket::ChattingPacket >(Arena* arena) {
  return Arena::CreateInternal< ::JIGAPPacket::ChattingPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::JIGAPPacket::BaseRequestPacket* Arena::CreateMaybeMessage< ::JIGAPPacket::BaseRequestPacket >(Arena* arena) {
  return Arena::CreateInternal< ::JIGAPPacket::BaseRequestPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::JIGAPPacket::BaseAsnwerPacket* Arena::CreateMaybeMessage< ::JIGAPPacket::BaseAsnwerPacket >(Arena* arena) {
  return Arena::CreateInternal< ::JIGAPPacket::BaseAsnwerPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
