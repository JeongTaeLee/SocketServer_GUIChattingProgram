// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JIGAPPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JIGAPPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_JIGAPPacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JIGAPPacket_2eproto;
namespace JIGAPPacket {
class ChattingPacket;
class ChattingPacketDefaultTypeInternal;
extern ChattingPacketDefaultTypeInternal _ChattingPacket_default_instance_;
class CreateRoomPacket;
class CreateRoomPacketDefaultTypeInternal;
extern CreateRoomPacketDefaultTypeInternal _CreateRoomPacket_default_instance_;
class JoinedRoomPacket;
class JoinedRoomPacketDefaultTypeInternal;
extern JoinedRoomPacketDefaultTypeInternal _JoinedRoomPacket_default_instance_;
class LoginPacket;
class LoginPacketDefaultTypeInternal;
extern LoginPacketDefaultTypeInternal _LoginPacket_default_instance_;
class RoomListPacket;
class RoomListPacketDefaultTypeInternal;
extern RoomListPacketDefaultTypeInternal _RoomListPacket_default_instance_;
}  // namespace JIGAPPacket
PROTOBUF_NAMESPACE_OPEN
template<> ::JIGAPPacket::ChattingPacket* Arena::CreateMaybeMessage<::JIGAPPacket::ChattingPacket>(Arena*);
template<> ::JIGAPPacket::CreateRoomPacket* Arena::CreateMaybeMessage<::JIGAPPacket::CreateRoomPacket>(Arena*);
template<> ::JIGAPPacket::JoinedRoomPacket* Arena::CreateMaybeMessage<::JIGAPPacket::JoinedRoomPacket>(Arena*);
template<> ::JIGAPPacket::LoginPacket* Arena::CreateMaybeMessage<::JIGAPPacket::LoginPacket>(Arena*);
template<> ::JIGAPPacket::RoomListPacket* Arena::CreateMaybeMessage<::JIGAPPacket::RoomListPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JIGAPPacket {

enum PacketType : int {
  LoginType = 0,
  RoomListType = 1,
  CreateRoomType = 2,
  JoinedRoomType = 3,
  ExitRoomType = 4,
  ChattingType = 5
};
bool PacketType_IsValid(int value);
constexpr PacketType PacketType_MIN = LoginType;
constexpr PacketType PacketType_MAX = ChattingType;
constexpr int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor();
template<typename T>
inline const std::string& PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketType_descriptor(), enum_t_value);
}
inline bool PacketType_Parse(
    const std::string& name, PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
// ===================================================================

class LoginPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.LoginPacket) */ {
 public:
  LoginPacket();
  virtual ~LoginPacket();

  LoginPacket(const LoginPacket& from);
  LoginPacket(LoginPacket&& from) noexcept
    : LoginPacket() {
    *this = ::std::move(from);
  }

  inline LoginPacket& operator=(const LoginPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginPacket& operator=(LoginPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginPacket* internal_default_instance() {
    return reinterpret_cast<const LoginPacket*>(
               &_LoginPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LoginPacket* other);
  friend void swap(LoginPacket& a, LoginPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginPacket* New() const final {
    return CreateMaybeMessage<LoginPacket>(nullptr);
  }

  LoginPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginPacket& from);
  void MergeFrom(const LoginPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.LoginPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nickName = 1;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 1;
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.LoginPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class RoomListPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.RoomListPacket) */ {
 public:
  RoomListPacket();
  virtual ~RoomListPacket();

  RoomListPacket(const RoomListPacket& from);
  RoomListPacket(RoomListPacket&& from) noexcept
    : RoomListPacket() {
    *this = ::std::move(from);
  }

  inline RoomListPacket& operator=(const RoomListPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomListPacket& operator=(RoomListPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomListPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomListPacket* internal_default_instance() {
    return reinterpret_cast<const RoomListPacket*>(
               &_RoomListPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RoomListPacket* other);
  friend void swap(RoomListPacket& a, RoomListPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomListPacket* New() const final {
    return CreateMaybeMessage<RoomListPacket>(nullptr);
  }

  RoomListPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomListPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomListPacket& from);
  void MergeFrom(const RoomListPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomListPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.RoomListPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string roomListString = 2;
  bool has_roomliststring() const;
  void clear_roomliststring();
  static const int kRoomListStringFieldNumber = 2;
  const std::string& roomliststring() const;
  void set_roomliststring(const std::string& value);
  void set_roomliststring(std::string&& value);
  void set_roomliststring(const char* value);
  void set_roomliststring(const char* value, size_t size);
  std::string* mutable_roomliststring();
  std::string* release_roomliststring();
  void set_allocated_roomliststring(std::string* roomliststring);

  // required int32 roomCount = 1;
  bool has_roomcount() const;
  void clear_roomcount();
  static const int kRoomCountFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcount() const;
  void set_roomcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.RoomListPacket)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomliststring_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcount_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class CreateRoomPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.CreateRoomPacket) */ {
 public:
  CreateRoomPacket();
  virtual ~CreateRoomPacket();

  CreateRoomPacket(const CreateRoomPacket& from);
  CreateRoomPacket(CreateRoomPacket&& from) noexcept
    : CreateRoomPacket() {
    *this = ::std::move(from);
  }

  inline CreateRoomPacket& operator=(const CreateRoomPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomPacket& operator=(CreateRoomPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoomPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoomPacket* internal_default_instance() {
    return reinterpret_cast<const CreateRoomPacket*>(
               &_CreateRoomPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateRoomPacket* other);
  friend void swap(CreateRoomPacket& a, CreateRoomPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRoomPacket* New() const final {
    return CreateMaybeMessage<CreateRoomPacket>(nullptr);
  }

  CreateRoomPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoomPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoomPacket& from);
  void MergeFrom(const CreateRoomPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.CreateRoomPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sender = 1;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // required string roomName = 2;
  bool has_roomname() const;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 2;
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.CreateRoomPacket)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class JoinedRoomPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.JoinedRoomPacket) */ {
 public:
  JoinedRoomPacket();
  virtual ~JoinedRoomPacket();

  JoinedRoomPacket(const JoinedRoomPacket& from);
  JoinedRoomPacket(JoinedRoomPacket&& from) noexcept
    : JoinedRoomPacket() {
    *this = ::std::move(from);
  }

  inline JoinedRoomPacket& operator=(const JoinedRoomPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinedRoomPacket& operator=(JoinedRoomPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinedRoomPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinedRoomPacket* internal_default_instance() {
    return reinterpret_cast<const JoinedRoomPacket*>(
               &_JoinedRoomPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(JoinedRoomPacket* other);
  friend void swap(JoinedRoomPacket& a, JoinedRoomPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinedRoomPacket* New() const final {
    return CreateMaybeMessage<JoinedRoomPacket>(nullptr);
  }

  JoinedRoomPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinedRoomPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinedRoomPacket& from);
  void MergeFrom(const JoinedRoomPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinedRoomPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.JoinedRoomPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sender = 1;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // required string roomName = 2;
  bool has_roomname() const;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 2;
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.JoinedRoomPacket)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class ChattingPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.ChattingPacket) */ {
 public:
  ChattingPacket();
  virtual ~ChattingPacket();

  ChattingPacket(const ChattingPacket& from);
  ChattingPacket(ChattingPacket&& from) noexcept
    : ChattingPacket() {
    *this = ::std::move(from);
  }

  inline ChattingPacket& operator=(const ChattingPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChattingPacket& operator=(ChattingPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChattingPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChattingPacket* internal_default_instance() {
    return reinterpret_cast<const ChattingPacket*>(
               &_ChattingPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ChattingPacket* other);
  friend void swap(ChattingPacket& a, ChattingPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChattingPacket* New() const final {
    return CreateMaybeMessage<ChattingPacket>(nullptr);
  }

  ChattingPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChattingPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChattingPacket& from);
  void MergeFrom(const ChattingPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChattingPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.ChattingPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sender = 1;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const std::string& sender() const;
  void set_sender(const std::string& value);
  void set_sender(std::string&& value);
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  std::string* mutable_sender();
  std::string* release_sender();
  void set_allocated_sender(std::string* sender);

  // required string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.ChattingPacket)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginPacket

// required string nickName = 1;
inline bool LoginPacket::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginPacket::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginPacket::nickname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.LoginPacket.nickName)
  return nickname_.GetNoArena();
}
inline void LoginPacket::set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.LoginPacket.nickName)
}
inline void LoginPacket::set_nickname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.LoginPacket.nickName)
}
inline void LoginPacket::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.LoginPacket.nickName)
}
inline void LoginPacket::set_nickname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.LoginPacket.nickName)
}
inline std::string* LoginPacket::mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.LoginPacket.nickName)
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginPacket::release_nickname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.LoginPacket.nickName)
  if (!has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nickname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginPacket::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.LoginPacket.nickName)
}

// -------------------------------------------------------------------

// RoomListPacket

// required int32 roomCount = 1;
inline bool RoomListPacket::has_roomcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomListPacket::clear_roomcount() {
  roomcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomListPacket::roomcount() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.RoomListPacket.roomCount)
  return roomcount_;
}
inline void RoomListPacket::set_roomcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  roomcount_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.RoomListPacket.roomCount)
}

// required string roomListString = 2;
inline bool RoomListPacket::has_roomliststring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomListPacket::clear_roomliststring() {
  roomliststring_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoomListPacket::roomliststring() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.RoomListPacket.roomListString)
  return roomliststring_.GetNoArena();
}
inline void RoomListPacket::set_roomliststring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  roomliststring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.RoomListPacket.roomListString)
}
inline void RoomListPacket::set_roomliststring(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  roomliststring_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.RoomListPacket.roomListString)
}
inline void RoomListPacket::set_roomliststring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  roomliststring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.RoomListPacket.roomListString)
}
inline void RoomListPacket::set_roomliststring(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  roomliststring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.RoomListPacket.roomListString)
}
inline std::string* RoomListPacket::mutable_roomliststring() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.RoomListPacket.roomListString)
  return roomliststring_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomListPacket::release_roomliststring() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.RoomListPacket.roomListString)
  if (!has_roomliststring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return roomliststring_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomListPacket::set_allocated_roomliststring(std::string* roomliststring) {
  if (roomliststring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  roomliststring_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomliststring);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.RoomListPacket.roomListString)
}

// -------------------------------------------------------------------

// CreateRoomPacket

// required string sender = 1;
inline bool CreateRoomPacket::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoomPacket::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateRoomPacket::sender() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.CreateRoomPacket.sender)
  return sender_.GetNoArena();
}
inline void CreateRoomPacket::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.CreateRoomPacket.sender)
}
inline void CreateRoomPacket::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.CreateRoomPacket.sender)
}
inline void CreateRoomPacket::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.CreateRoomPacket.sender)
}
inline void CreateRoomPacket::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.CreateRoomPacket.sender)
}
inline std::string* CreateRoomPacket::mutable_sender() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.CreateRoomPacket.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRoomPacket::release_sender() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.CreateRoomPacket.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRoomPacket::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.CreateRoomPacket.sender)
}

// required string roomName = 2;
inline bool CreateRoomPacket::has_roomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRoomPacket::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateRoomPacket::roomname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.CreateRoomPacket.roomName)
  return roomname_.GetNoArena();
}
inline void CreateRoomPacket::set_roomname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.CreateRoomPacket.roomName)
}
inline void CreateRoomPacket::set_roomname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  roomname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.CreateRoomPacket.roomName)
}
inline void CreateRoomPacket::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.CreateRoomPacket.roomName)
}
inline void CreateRoomPacket::set_roomname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.CreateRoomPacket.roomName)
}
inline std::string* CreateRoomPacket::mutable_roomname() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.CreateRoomPacket.roomName)
  return roomname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRoomPacket::release_roomname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.CreateRoomPacket.roomName)
  if (!has_roomname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return roomname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRoomPacket::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  roomname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.CreateRoomPacket.roomName)
}

// -------------------------------------------------------------------

// JoinedRoomPacket

// required string sender = 1;
inline bool JoinedRoomPacket::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinedRoomPacket::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinedRoomPacket::sender() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinedRoomPacket.sender)
  return sender_.GetNoArena();
}
inline void JoinedRoomPacket::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.JoinedRoomPacket.sender)
}
inline void JoinedRoomPacket::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.JoinedRoomPacket.sender)
}
inline void JoinedRoomPacket::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.JoinedRoomPacket.sender)
}
inline void JoinedRoomPacket::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.JoinedRoomPacket.sender)
}
inline std::string* JoinedRoomPacket::mutable_sender() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.JoinedRoomPacket.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinedRoomPacket::release_sender() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.JoinedRoomPacket.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinedRoomPacket::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.JoinedRoomPacket.sender)
}

// required string roomName = 2;
inline bool JoinedRoomPacket::has_roomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinedRoomPacket::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& JoinedRoomPacket::roomname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinedRoomPacket.roomName)
  return roomname_.GetNoArena();
}
inline void JoinedRoomPacket::set_roomname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.JoinedRoomPacket.roomName)
}
inline void JoinedRoomPacket::set_roomname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  roomname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.JoinedRoomPacket.roomName)
}
inline void JoinedRoomPacket::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.JoinedRoomPacket.roomName)
}
inline void JoinedRoomPacket::set_roomname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.JoinedRoomPacket.roomName)
}
inline std::string* JoinedRoomPacket::mutable_roomname() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.JoinedRoomPacket.roomName)
  return roomname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinedRoomPacket::release_roomname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.JoinedRoomPacket.roomName)
  if (!has_roomname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return roomname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinedRoomPacket::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  roomname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.JoinedRoomPacket.roomName)
}

// -------------------------------------------------------------------

// ChattingPacket

// required string sender = 1;
inline bool ChattingPacket::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChattingPacket::clear_sender() {
  sender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChattingPacket::sender() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.ChattingPacket.sender)
  return sender_.GetNoArena();
}
inline void ChattingPacket::set_sender(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.ChattingPacket.sender)
}
inline void ChattingPacket::set_sender(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.ChattingPacket.sender)
}
inline void ChattingPacket::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.ChattingPacket.sender)
}
inline void ChattingPacket::set_sender(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.ChattingPacket.sender)
}
inline std::string* ChattingPacket::mutable_sender() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.ChattingPacket.sender)
  return sender_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChattingPacket::release_sender() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.ChattingPacket.sender)
  if (!has_sender()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChattingPacket::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.ChattingPacket.sender)
}

// required string msg = 2;
inline bool ChattingPacket::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChattingPacket::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChattingPacket::msg() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.ChattingPacket.msg)
  return msg_.GetNoArena();
}
inline void ChattingPacket::set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.ChattingPacket.msg)
}
inline void ChattingPacket::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.ChattingPacket.msg)
}
inline void ChattingPacket::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.ChattingPacket.msg)
}
inline void ChattingPacket::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.ChattingPacket.msg)
}
inline std::string* ChattingPacket::mutable_msg() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.ChattingPacket.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChattingPacket::release_msg() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.ChattingPacket.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChattingPacket::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.ChattingPacket.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace JIGAPPacket

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JIGAPPacket::PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JIGAPPacket::PacketType>() {
  return ::JIGAPPacket::PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
