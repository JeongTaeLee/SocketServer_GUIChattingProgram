// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JIGAPPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JIGAPPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_JIGAPPacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JIGAPPacket_2eproto;
namespace JIGAPPacket {
class CreateRoomAnswer;
class CreateRoomAnswerDefaultTypeInternal;
extern CreateRoomAnswerDefaultTypeInternal _CreateRoomAnswer_default_instance_;
class EmptyPacket;
class EmptyPacketDefaultTypeInternal;
extern EmptyPacketDefaultTypeInternal _EmptyPacket_default_instance_;
class JoinRoomAnswer;
class JoinRoomAnswerDefaultTypeInternal;
extern JoinRoomAnswerDefaultTypeInternal _JoinRoomAnswer_default_instance_;
class JoinRoomRequest;
class JoinRoomRequestDefaultTypeInternal;
extern JoinRoomRequestDefaultTypeInternal _JoinRoomRequest_default_instance_;
class LoginAnswer;
class LoginAnswerDefaultTypeInternal;
extern LoginAnswerDefaultTypeInternal _LoginAnswer_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class RoomListAnswer;
class RoomListAnswerDefaultTypeInternal;
extern RoomListAnswerDefaultTypeInternal _RoomListAnswer_default_instance_;
class RoomListElement;
class RoomListElementDefaultTypeInternal;
extern RoomListElementDefaultTypeInternal _RoomListElement_default_instance_;
}  // namespace JIGAPPacket
PROTOBUF_NAMESPACE_OPEN
template<> ::JIGAPPacket::CreateRoomAnswer* Arena::CreateMaybeMessage<::JIGAPPacket::CreateRoomAnswer>(Arena*);
template<> ::JIGAPPacket::EmptyPacket* Arena::CreateMaybeMessage<::JIGAPPacket::EmptyPacket>(Arena*);
template<> ::JIGAPPacket::JoinRoomAnswer* Arena::CreateMaybeMessage<::JIGAPPacket::JoinRoomAnswer>(Arena*);
template<> ::JIGAPPacket::JoinRoomRequest* Arena::CreateMaybeMessage<::JIGAPPacket::JoinRoomRequest>(Arena*);
template<> ::JIGAPPacket::LoginAnswer* Arena::CreateMaybeMessage<::JIGAPPacket::LoginAnswer>(Arena*);
template<> ::JIGAPPacket::LoginRequest* Arena::CreateMaybeMessage<::JIGAPPacket::LoginRequest>(Arena*);
template<> ::JIGAPPacket::RoomInfo* Arena::CreateMaybeMessage<::JIGAPPacket::RoomInfo>(Arena*);
template<> ::JIGAPPacket::RoomListAnswer* Arena::CreateMaybeMessage<::JIGAPPacket::RoomListAnswer>(Arena*);
template<> ::JIGAPPacket::RoomListElement* Arena::CreateMaybeMessage<::JIGAPPacket::RoomListElement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JIGAPPacket {

enum Type : int {
  eLoginRequest = 0,
  eLoginAnswer = 1,
  eCreateRoomRequest = 2,
  eCreateRoomAnswer = 3,
  eJoinRoomRequest = 4,
  eJoinRoomAnswer = 5,
  eRoomListRequest = 6,
  eRoomListAnswer = 7,
  eRoomListElement = 8,
  eExitRoomRequest = 9,
  eExitRoomAnswer = 10,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = eLoginRequest;
constexpr Type Type_MAX = eExitRoomAnswer;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    const std::string& name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class RoomInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.RoomInfo) */ {
 public:
  RoomInfo();
  virtual ~RoomInfo();

  RoomInfo(const RoomInfo& from);
  RoomInfo(RoomInfo&& from) noexcept
    : RoomInfo() {
    *this = ::std::move(from);
  }

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo& operator=(RoomInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RoomInfo* other);
  friend void swap(RoomInfo& a, RoomInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomInfo* New() const final {
    return CreateMaybeMessage<RoomInfo>(nullptr);
  }

  RoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomInfo& from);
  void MergeFrom(const RoomInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.RoomInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roomname = 1;
  void clear_roomname();
  static const int kRoomnameFieldNumber = 1;
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.RoomInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string passward = 2;
  void clear_passward();
  static const int kPasswardFieldNumber = 2;
  const std::string& passward() const;
  void set_passward(const std::string& value);
  void set_passward(std::string&& value);
  void set_passward(const char* value);
  void set_passward(const char* value, size_t size);
  std::string* mutable_passward();
  std::string* release_passward();
  void set_allocated_passward(std::string* passward);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.LoginRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class LoginAnswer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.LoginAnswer) */ {
 public:
  LoginAnswer();
  virtual ~LoginAnswer();

  LoginAnswer(const LoginAnswer& from);
  LoginAnswer(LoginAnswer&& from) noexcept
    : LoginAnswer() {
    *this = ::std::move(from);
  }

  inline LoginAnswer& operator=(const LoginAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAnswer& operator=(LoginAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAnswer* internal_default_instance() {
    return reinterpret_cast<const LoginAnswer*>(
               &_LoginAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginAnswer* other);
  friend void swap(LoginAnswer& a, LoginAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginAnswer* New() const final {
    return CreateMaybeMessage<LoginAnswer>(nullptr);
  }

  LoginAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAnswer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginAnswer& from);
  void MergeFrom(const LoginAnswer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAnswer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.LoginAnswer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.LoginAnswer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class CreateRoomAnswer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.CreateRoomAnswer) */ {
 public:
  CreateRoomAnswer();
  virtual ~CreateRoomAnswer();

  CreateRoomAnswer(const CreateRoomAnswer& from);
  CreateRoomAnswer(CreateRoomAnswer&& from) noexcept
    : CreateRoomAnswer() {
    *this = ::std::move(from);
  }

  inline CreateRoomAnswer& operator=(const CreateRoomAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomAnswer& operator=(CreateRoomAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoomAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoomAnswer* internal_default_instance() {
    return reinterpret_cast<const CreateRoomAnswer*>(
               &_CreateRoomAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateRoomAnswer* other);
  friend void swap(CreateRoomAnswer& a, CreateRoomAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRoomAnswer* New() const final {
    return CreateMaybeMessage<CreateRoomAnswer>(nullptr);
  }

  CreateRoomAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoomAnswer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoomAnswer& from);
  void MergeFrom(const CreateRoomAnswer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomAnswer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.CreateRoomAnswer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.CreateRoomAnswer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class JoinRoomRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.JoinRoomRequest) */ {
 public:
  JoinRoomRequest();
  virtual ~JoinRoomRequest();

  JoinRoomRequest(const JoinRoomRequest& from);
  JoinRoomRequest(JoinRoomRequest&& from) noexcept
    : JoinRoomRequest() {
    *this = ::std::move(from);
  }

  inline JoinRoomRequest& operator=(const JoinRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomRequest& operator=(JoinRoomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinRoomRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRoomRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRoomRequest*>(
               &_JoinRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(JoinRoomRequest* other);
  friend void swap(JoinRoomRequest& a, JoinRoomRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinRoomRequest* New() const final {
    return CreateMaybeMessage<JoinRoomRequest>(nullptr);
  }

  JoinRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRoomRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRoomRequest& from);
  void MergeFrom(const JoinRoomRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.JoinRoomRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .JIGAPPacket.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  void clear_roominfo();
  static const int kRoomInfoFieldNumber = 1;
  const ::JIGAPPacket::RoomInfo& roominfo() const;
  ::JIGAPPacket::RoomInfo* release_roominfo();
  ::JIGAPPacket::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::JIGAPPacket::RoomInfo* roominfo);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.JoinRoomRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::JIGAPPacket::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class JoinRoomAnswer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.JoinRoomAnswer) */ {
 public:
  JoinRoomAnswer();
  virtual ~JoinRoomAnswer();

  JoinRoomAnswer(const JoinRoomAnswer& from);
  JoinRoomAnswer(JoinRoomAnswer&& from) noexcept
    : JoinRoomAnswer() {
    *this = ::std::move(from);
  }

  inline JoinRoomAnswer& operator=(const JoinRoomAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomAnswer& operator=(JoinRoomAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinRoomAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRoomAnswer* internal_default_instance() {
    return reinterpret_cast<const JoinRoomAnswer*>(
               &_JoinRoomAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(JoinRoomAnswer* other);
  friend void swap(JoinRoomAnswer& a, JoinRoomAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinRoomAnswer* New() const final {
    return CreateMaybeMessage<JoinRoomAnswer>(nullptr);
  }

  JoinRoomAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinRoomAnswer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinRoomAnswer& from);
  void MergeFrom(const JoinRoomAnswer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomAnswer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.JoinRoomAnswer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.JoinRoomAnswer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class RoomListAnswer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.RoomListAnswer) */ {
 public:
  RoomListAnswer();
  virtual ~RoomListAnswer();

  RoomListAnswer(const RoomListAnswer& from);
  RoomListAnswer(RoomListAnswer&& from) noexcept
    : RoomListAnswer() {
    *this = ::std::move(from);
  }

  inline RoomListAnswer& operator=(const RoomListAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomListAnswer& operator=(RoomListAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomListAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomListAnswer* internal_default_instance() {
    return reinterpret_cast<const RoomListAnswer*>(
               &_RoomListAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RoomListAnswer* other);
  friend void swap(RoomListAnswer& a, RoomListAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomListAnswer* New() const final {
    return CreateMaybeMessage<RoomListAnswer>(nullptr);
  }

  RoomListAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomListAnswer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomListAnswer& from);
  void MergeFrom(const RoomListAnswer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomListAnswer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.RoomListAnswer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 roomCount = 1;
  void clear_roomcount();
  static const int kRoomCountFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcount() const;
  void set_roomcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.RoomListAnswer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class RoomListElement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.RoomListElement) */ {
 public:
  RoomListElement();
  virtual ~RoomListElement();

  RoomListElement(const RoomListElement& from);
  RoomListElement(RoomListElement&& from) noexcept
    : RoomListElement() {
    *this = ::std::move(from);
  }

  inline RoomListElement& operator=(const RoomListElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomListElement& operator=(RoomListElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomListElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomListElement* internal_default_instance() {
    return reinterpret_cast<const RoomListElement*>(
               &_RoomListElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RoomListElement* other);
  friend void swap(RoomListElement& a, RoomListElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomListElement* New() const final {
    return CreateMaybeMessage<RoomListElement>(nullptr);
  }

  RoomListElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomListElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomListElement& from);
  void MergeFrom(const RoomListElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomListElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.RoomListElement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .JIGAPPacket.RoomInfo roomInfo = 1;
  bool has_roominfo() const;
  void clear_roominfo();
  static const int kRoomInfoFieldNumber = 1;
  const ::JIGAPPacket::RoomInfo& roominfo() const;
  ::JIGAPPacket::RoomInfo* release_roominfo();
  ::JIGAPPacket::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::JIGAPPacket::RoomInfo* roominfo);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.RoomListElement)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::JIGAPPacket::RoomInfo* roominfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// -------------------------------------------------------------------

class EmptyPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JIGAPPacket.EmptyPacket) */ {
 public:
  EmptyPacket();
  virtual ~EmptyPacket();

  EmptyPacket(const EmptyPacket& from);
  EmptyPacket(EmptyPacket&& from) noexcept
    : EmptyPacket() {
    *this = ::std::move(from);
  }

  inline EmptyPacket& operator=(const EmptyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyPacket& operator=(EmptyPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyPacket* internal_default_instance() {
    return reinterpret_cast<const EmptyPacket*>(
               &_EmptyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(EmptyPacket* other);
  friend void swap(EmptyPacket& a, EmptyPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyPacket* New() const final {
    return CreateMaybeMessage<EmptyPacket>(nullptr);
  }

  EmptyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyPacket& from);
  void MergeFrom(const EmptyPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JIGAPPacket.EmptyPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_JIGAPPacket_2eproto);
    return ::descriptor_table_JIGAPPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .JIGAPPacket.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::JIGAPPacket::Type type() const;
  void set_type(::JIGAPPacket::Type value);

  // @@protoc_insertion_point(class_scope:JIGAPPacket.EmptyPacket)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_JIGAPPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoomInfo

// string roomname = 1;
inline void RoomInfo::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoomInfo::roomname() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.RoomInfo.roomname)
  return roomname_.GetNoArena();
}
inline void RoomInfo::set_roomname(const std::string& value) {
  
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.RoomInfo.roomname)
}
inline void RoomInfo::set_roomname(std::string&& value) {
  
  roomname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.RoomInfo.roomname)
}
inline void RoomInfo::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.RoomInfo.roomname)
}
inline void RoomInfo::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.RoomInfo.roomname)
}
inline std::string* RoomInfo::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.RoomInfo.roomname)
  return roomname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomInfo::release_roomname() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.RoomInfo.roomname)
  
  return roomname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomInfo::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.RoomInfo.roomname)
}

// -------------------------------------------------------------------

// LoginRequest

// string id = 1;
inline void LoginRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::id() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.LoginRequest.id)
  return id_.GetNoArena();
}
inline void LoginRequest::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.LoginRequest.id)
}
inline void LoginRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.LoginRequest.id)
}
inline void LoginRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.LoginRequest.id)
}
inline void LoginRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.LoginRequest.id)
}
inline std::string* LoginRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.LoginRequest.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_id() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.LoginRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.LoginRequest.id)
}

// string passward = 2;
inline void LoginRequest::clear_passward() {
  passward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::passward() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.LoginRequest.passward)
  return passward_.GetNoArena();
}
inline void LoginRequest::set_passward(const std::string& value) {
  
  passward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JIGAPPacket.LoginRequest.passward)
}
inline void LoginRequest::set_passward(std::string&& value) {
  
  passward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JIGAPPacket.LoginRequest.passward)
}
inline void LoginRequest::set_passward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JIGAPPacket.LoginRequest.passward)
}
inline void LoginRequest::set_passward(const char* value, size_t size) {
  
  passward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JIGAPPacket.LoginRequest.passward)
}
inline std::string* LoginRequest::mutable_passward() {
  
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.LoginRequest.passward)
  return passward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_passward() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.LoginRequest.passward)
  
  return passward_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_passward(std::string* passward) {
  if (passward != nullptr) {
    
  } else {
    
  }
  passward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passward);
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.LoginRequest.passward)
}

// -------------------------------------------------------------------

// LoginAnswer

// bool success = 1;
inline void LoginAnswer::clear_success() {
  success_ = false;
}
inline bool LoginAnswer::success() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.LoginAnswer.success)
  return success_;
}
inline void LoginAnswer::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.LoginAnswer.success)
}

// -------------------------------------------------------------------

// CreateRoomAnswer

// bool success = 1;
inline void CreateRoomAnswer::clear_success() {
  success_ = false;
}
inline bool CreateRoomAnswer::success() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.CreateRoomAnswer.success)
  return success_;
}
inline void CreateRoomAnswer::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.CreateRoomAnswer.success)
}

// -------------------------------------------------------------------

// JoinRoomRequest

// .JIGAPPacket.RoomInfo roomInfo = 1;
inline bool JoinRoomRequest::has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline void JoinRoomRequest::clear_roominfo() {
  if (GetArenaNoVirtual() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
inline const ::JIGAPPacket::RoomInfo& JoinRoomRequest::roominfo() const {
  const ::JIGAPPacket::RoomInfo* p = roominfo_;
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinRoomRequest.roomInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::JIGAPPacket::RoomInfo*>(
      &::JIGAPPacket::_RoomInfo_default_instance_);
}
inline ::JIGAPPacket::RoomInfo* JoinRoomRequest::release_roominfo() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.JoinRoomRequest.roomInfo)
  
  ::JIGAPPacket::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::JIGAPPacket::RoomInfo* JoinRoomRequest::mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JIGAPPacket::RoomInfo>(GetArenaNoVirtual());
    roominfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.JoinRoomRequest.roomInfo)
  return roominfo_;
}
inline void JoinRoomRequest::set_allocated_roominfo(::JIGAPPacket::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roominfo_;
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.JoinRoomRequest.roomInfo)
}

// -------------------------------------------------------------------

// JoinRoomAnswer

// bool success = 1;
inline void JoinRoomAnswer::clear_success() {
  success_ = false;
}
inline bool JoinRoomAnswer::success() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.JoinRoomAnswer.success)
  return success_;
}
inline void JoinRoomAnswer::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.JoinRoomAnswer.success)
}

// -------------------------------------------------------------------

// RoomListAnswer

// int32 roomCount = 1;
inline void RoomListAnswer::clear_roomcount() {
  roomcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomListAnswer::roomcount() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.RoomListAnswer.roomCount)
  return roomcount_;
}
inline void RoomListAnswer::set_roomcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomcount_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.RoomListAnswer.roomCount)
}

// -------------------------------------------------------------------

// RoomListElement

// .JIGAPPacket.RoomInfo roomInfo = 1;
inline bool RoomListElement::has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline void RoomListElement::clear_roominfo() {
  if (GetArenaNoVirtual() == nullptr && roominfo_ != nullptr) {
    delete roominfo_;
  }
  roominfo_ = nullptr;
}
inline const ::JIGAPPacket::RoomInfo& RoomListElement::roominfo() const {
  const ::JIGAPPacket::RoomInfo* p = roominfo_;
  // @@protoc_insertion_point(field_get:JIGAPPacket.RoomListElement.roomInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::JIGAPPacket::RoomInfo*>(
      &::JIGAPPacket::_RoomInfo_default_instance_);
}
inline ::JIGAPPacket::RoomInfo* RoomListElement::release_roominfo() {
  // @@protoc_insertion_point(field_release:JIGAPPacket.RoomListElement.roomInfo)
  
  ::JIGAPPacket::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::JIGAPPacket::RoomInfo* RoomListElement::mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::JIGAPPacket::RoomInfo>(GetArenaNoVirtual());
    roominfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JIGAPPacket.RoomListElement.roomInfo)
  return roominfo_;
}
inline void RoomListElement::set_allocated_roominfo(::JIGAPPacket::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roominfo_;
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:JIGAPPacket.RoomListElement.roomInfo)
}

// -------------------------------------------------------------------

// EmptyPacket

// .JIGAPPacket.Type type = 1;
inline void EmptyPacket::clear_type() {
  type_ = 0;
}
inline ::JIGAPPacket::Type EmptyPacket::type() const {
  // @@protoc_insertion_point(field_get:JIGAPPacket.EmptyPacket.type)
  return static_cast< ::JIGAPPacket::Type >(type_);
}
inline void EmptyPacket::set_type(::JIGAPPacket::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:JIGAPPacket.EmptyPacket.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace JIGAPPacket

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JIGAPPacket::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JIGAPPacket::Type>() {
  return ::JIGAPPacket::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JIGAPPacket_2eproto
